{
  "version": 3,
  "sources": ["../../src/lib/SSVKeys.ts", "../../src/lib/BLS/index.ts", "../../src/lib/Threshold/Threshold.ts", "../../src/lib/Encryption/Encryption.ts", "../../src/lib/JSEncrypt/index.ts", "../../src/lib/EthereumKeyStore/EthereumKeyStore.ts", "../../src/lib/KeyShares/KeyShares.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesDataV2.ts", "../../src/commands/actions/validators/operator.ts"],
  "sourcesContent": ["import atob from 'atob';\nimport Web3 from 'web3';\nimport { encode } from 'js-base64';\nimport EthereumKeyStore from 'eth2-keystore-js';\nimport Threshold, { IShares, ISharesKeyPairs } from './Threshold';\nimport Encryption, { EncryptShare } from './Encryption/Encryption';\n\nexport class SSVKeys {\n  static SHARES_FORMAT_ABI = 'abi';\n\n  protected web3Instances: any = {};\n\n  getWeb3(nodeUrl = process.env.NODE_URL || ''): Web3 {\n    if (!this.web3Instances[nodeUrl]) {\n      this.web3Instances[nodeUrl] = new Web3(String(nodeUrl || ''))\n    }\n    return this.web3Instances[nodeUrl];\n  }\n\n  /**\n   * Extract private key from keystore data using keystore password.\n   * Generally can be used in browsers when the keystore data has been provided by browser.\n   * @param data\n   * @param password\n   */\n  async getPrivateKeyFromKeystoreData(data: string, password: string): Promise<string> {\n    try {\n      try {\n        // Try to json parse the data before\n        data = JSON.parse(data);\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n\n      const keyStore = new EthereumKeyStore(data);\n      return await keyStore.getPrivateKey(password).then((privateKey: string) => privateKey);\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Build threshold using private key for number of participants and failed participants.\n   * @param privateKey\n   * @param operators\n   */\n  async createThreshold(privateKey: string, operators: number[]): Promise<ISharesKeyPairs> {\n    try {\n      const threshold: Threshold = new Threshold();\n      return threshold.create(privateKey, operators);\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Encrypt operators shares using operators public keys.\n   * @param operatorsPublicKeys\n   * @param shares\n   * @param sharesFormat\n   */\n  async encryptShares(operatorsPublicKeys: string[], shares: IShares[], sharesFormat = ''): Promise<EncryptShare[]> {\n    try {\n      const decodedOperators = operatorsPublicKeys.map((operator: string) => String(encode(atob(operator))));\n      const encryptedShares = new Encryption(decodedOperators, shares).encrypt();\n      return encryptedShares.map((share: EncryptShare) => {\n        share.operatorPublicKey = encode(share.operatorPublicKey);\n        if (sharesFormat === SSVKeys.SHARES_FORMAT_ABI) {\n          share.operatorPublicKey = this.getWeb3().eth.abi.encodeParameter('string', share.operatorPublicKey);\n          share.privateKey = this.getWeb3().eth.abi.encodeParameter('string', share.privateKey);\n        }\n        return share;\n      });\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Encode with Web3 eth abi method any fields of shares array required for transaction.\n   * @param encryptedShares\n   * @param field\n   */\n  abiEncode(encryptedShares: EncryptShare[], field: string): string[] {\n    return encryptedShares.map((share: EncryptShare) => {\n      const value = Object(share)[field];\n      if (String(value).startsWith('0x')) {\n        return value;\n      }\n      return this.getWeb3().eth.abi.encodeParameter('string', value);\n    });\n  }\n\n  /**\n   * Having keystore private key build final transaction payload for list of operators IDs from contract.\n   *\n   * Example:\n   *\n   *    const privateKey = await ssvKeys.getPrivateKeyFromKeystoreFile(keystoreFilePath, keystorePassword);\n   *    const encryptedShares = await ssvKeys.encryptShares(...);\n   *    await ssvKeys.buildPayload(...)\n   *\n   * @param validatorPublicKey\n   * @param operatorsIds\n   * @param encryptedShares\n   * @param ssvAmount\n   */\n  async buildPayload(validatorPublicKey: string,\n                     operatorsIds: number[],\n                     encryptedShares: EncryptShare[],\n                     ssvAmount: number | string\n  ): Promise<any[]> {\n    const sharePublicKey: string[] = encryptedShares.map((share: EncryptShare) => share.publicKey);\n    const sharePrivateKey: string[] = this.abiEncode(encryptedShares, 'privateKey');\n    return [\n      validatorPublicKey,\n      operatorsIds.join(','),\n      sharePublicKey,\n      sharePrivateKey,\n      ssvAmount,\n    ];\n  }\n}\n", "let index: any;\n\ntry {\n  window.crypto;\n  index = require('bls-eth-wasm/browser');\n} catch {\n  index = require('bls-eth-wasm');\n}\n\nexport default index;\n", "import { SecretKeyType } from 'bls-eth-wasm';\nimport bls from '../BLS';\n\nexport interface IShares {\n    privateKey: string,\n    publicKey: string,\n    id?: any\n}\n\nexport interface ISharesKeyPairs {\n    validatorPrivateKey: string,\n    validatorPublicKey: string,\n    shares: IShares[]\n}\n\nexport class ThresholdInvalidOperatorsLengthError extends Error {\n  public operators: number[];\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(operators: number[], message: string) {\n    super(message);\n    this.operators = operators;\n  }\n}\n\nexport class ThresholdInvalidOperatorIdError extends Error {\n  public operator: any;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(operator: any, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\n/**\n * Building threshold for list of operator IDs\n */\nclass Threshold {\n    protected validatorPublicKey: any;\n    protected validatorPrivateKey: any;\n    protected shares: Array<any> = [];\n\n    static get DEFAULT_THRESHOLD_NUMBER(): number {\n      return 3;\n    }\n\n    /**\n     * Receives list of operators IDs.\n     *  len(operator IDs) := 3 * F + 1\n     *\n     * If F calculated from this formula is not integer number - it will raise exception.\n     * Generate keys and return promise\n     */\n    async create(privateKey: string, operators: number[]): Promise<ISharesKeyPairs> {\n        // Validation\n        operators.map(operator => {\n          if (!Number.isInteger(operator)) {\n            throw new ThresholdInvalidOperatorIdError(\n              operator,\n              `Operator must be integer. Got: ${String(operator)}`\n            );\n          }\n        });\n\n        const F = (operators.length - 1) / 3;\n        if (!Number.isInteger(F)) {\n          throw new ThresholdInvalidOperatorsLengthError(\n            operators,\n            'Invalid operators length. It should satisfy conditions: \u2016 Operators \u2016 := 3 * F + 1 ; F \u2208 \u2115'\n          );\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n                bls.init(bls.BLS12_381)\n                    .then(() => {\n                        const msk = [];\n                        const mpk = [];\n\n                        // Master key Polynomial\n                        this.validatorPrivateKey = bls.deserializeHexStrToSecretKey(privateKey);\n                        this.validatorPublicKey = this.validatorPrivateKey.getPublicKey();\n\n                        msk.push(this.validatorPrivateKey);\n                        mpk.push(this.validatorPublicKey);\n\n                        // Construct poly\n                        for (let i = 1; i < operators.length - F; i += 1) {\n                            const sk: SecretKeyType = new bls.SecretKey();\n                            sk.setByCSPRNG();\n                            msk.push(sk);\n                            const pk = sk.getPublicKey();\n                            mpk.push(pk);\n                        }\n\n                        // Evaluate shares - starting from 1 because 0 is master key\n                        for (const operatorId of operators) {\n                            const id = new bls.Id();\n                            id.setInt(operatorId);\n                            const shareSecretKey = new bls.SecretKey();\n                            shareSecretKey.share(msk, id);\n\n                            const sharePublicKey = new bls.PublicKey();\n                            sharePublicKey.share(mpk, id);\n\n                            this.shares.push({\n                                privateKey: `0x${shareSecretKey.serializeToHexStr()}`,\n                                publicKey: `0x${sharePublicKey.serializeToHexStr()}`,\n                                id,\n                            });\n                        }\n\n                        const response: ISharesKeyPairs = {\n                            validatorPrivateKey: `0x${this.validatorPrivateKey.serializeToHexStr()}`,\n                            validatorPublicKey: `0x${this.validatorPublicKey.serializeToHexStr()}`,\n                            shares: this.shares,\n                        };\n                        resolve(response);\n                    });\n            } catch (error: any) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Threshold;\n", "import {decode, encode} from 'js-base64';\nimport JSEncrypt from '../JSEncrypt';\nimport { IShares } from '../Threshold';\n\nexport class InvalidOperatorKeyException extends Error {\n  public operator: any;\n\n  constructor(operator: { rsa: string, base64: string }, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\nexport interface EncryptShare {\n    operatorPublicKey: string,\n    privateKey: string,\n    publicKey: string\n}\n\nexport default class Encryption {\n    private readonly operators: string[];\n    private readonly shares: IShares[];\n\n  RAW_OPERATOR_PUBLIC_KEY_SIGNATURE = RegExp(/------BEGIN RSA PUBLIC KEY-----/, 'gmi');\n\n  constructor(operators: string[], shares: IShares[]) {\n    this.operators = operators.map((publicKey: string) => {\n      if (this.RAW_OPERATOR_PUBLIC_KEY_SIGNATURE.test(publicKey)) {\n        return publicKey;\n      }\n      return decode(publicKey);\n    });\n    this.shares = shares;\n  }\n\n    encrypt(): EncryptShare[] {\n        const encryptedShares: EncryptShare[] = [];\n        Object.keys(this.operators).forEach((operator: any) => {\n            const encrypt = new JSEncrypt({});\n            try {\n              encrypt.setPublicKey(this.operators[operator]);\n            } catch (error) {\n              throw new InvalidOperatorKeyException(\n                {\n                  rsa: this.operators[operator],\n                  base64: encode(this.operators[operator]),\n                },\n                `Operator is not valid RSA Public Key: ${error}`\n              );\n            }\n            const encrypted = encrypt.encrypt(this.shares[operator].privateKey);\n            const encryptedShare: EncryptShare = {\n                operatorPublicKey: this.operators[operator],\n                privateKey: String(encrypted),\n                publicKey: this.shares[operator].publicKey,\n            };\n            encryptedShares.push(encryptedShare);\n            return encryptedShare;\n        });\n        return encryptedShares;\n    }\n}\n", "let index: any;\n\ntry {\n  window.crypto;\n  index = require('jsencrypt').JSEncrypt;\n} catch {\n  index = require('node-jsencrypt');\n}\n\nexport default index;\n", "import crypto from 'crypto';\nimport { scrypt } from 'scrypt-js';\nimport Wallet from 'ethereumjs-wallet';\nimport { keccak256, sha256 } from 'ethereumjs-util';\n\ninterface V4Keystore {\n  crypto: {\n    kdf: {\n      function: string,\n      params: {\n        dklen: number,\n        n: number,\n        r: number,\n        p: number,\n        salt: string\n      },\n      message: string\n    },\n    checksum: {\n      function: string,\n      params: any,\n      message: string\n    },\n    cipher: {\n      function: string,\n      params: {\n        iv: string\n      },\n      message: string\n    }\n  },\n  description: string,\n  pubkey: string,\n  path: string,\n  uuid: string\n  version: number\n}\n\n/**\n * Decrypt private key from key store data\n * Supports key store versions: v1, v3, v4\n *\n * Example of usage (Node env):\n *\n *  const keyStoreFilePath = path.join(process.cwd(), 'validator_keys', 'keystore.json');\n *  const keyStoreString: string = fs.readFileSync(keyStoreFilePath).toString();\n *  const keyStoreData = JSON.parse(keyStoreString);\n *  const keyStore = new EthereumKeyStore(keyStoreData);\n *  const password = 'testtest';\n *  console.log('Private Key:', await keyStore.getPrivateKey(password));\n */\nclass EthereumKeyStore {\n  private readonly keyStoreData: any;\n  private privateKey = '';\n  private wallet: Wallet | undefined;\n\n  /**\n   * Receive key store data from string or parsed JSON\n   * @param keyStoreData\n   */\n  constructor(keyStoreData: string | never) {\n    if (!keyStoreData) {\n      throw new Error('Key store data should be JSON or string');\n    }\n    this.keyStoreData = JSON.parse(String(keyStoreData));\n    if (!this.keyStoreData.version) {\n      throw new Error('Invalid keystore file');\n    }\n  }\n\n  getPublicKey(): string {\n    if (this.keyStoreData) {\n      switch (this.keyStoreData.version ?? this.keyStoreData.Version) {\n        case 1:\n          return this.keyStoreData.Address;\n        case 3:\n          return this.keyStoreData.id;\n        case 4:\n          return this.keyStoreData.pubkey;\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Decrypt private key using user password\n   * @param password\n   */\n  async getPrivateKey(password = ''): Promise<string> {\n    // In case private key exist we return it\n    if (this.privateKey) return this.privateKey;\n    switch (this.keyStoreData.version) {\n      case 1:\n        this.wallet = await Wallet.fromV1(this.keyStoreData, password);\n        break;\n      case 3:\n        this.wallet = await Wallet.fromV3(this.keyStoreData, password, true);\n        break;\n      case 4:\n        this.wallet = await this.fromV4(this.keyStoreData, password);\n        break;\n    }\n    if (this.wallet) {\n      this.privateKey = this.wallet.getPrivateKey().toString('hex');\n      if (!this.privateKey) {\n        throw new Error('Invalid password');\n      }\n    }\n    return this.privateKey;\n  }\n\n  /**\n   * Import a wallet (Version 4 of the Ethereum wallet format).\n   *\n   * @param input A JSON serialized string, or an object representing V3 Keystore.\n   * @param password The keystore password.\n   */\n  public async fromV4(\n    input: string | V4Keystore,\n    password: string,\n  ): Promise<Wallet> {\n    const json: V4Keystore = typeof input === 'object' ? input : JSON.parse(input);\n\n    if (json.version !== 4) {\n      throw new Error('Not a V4 wallet');\n    }\n\n    let derivedKey: Uint8Array;\n    let kdfParams: any;\n    if (json.crypto.kdf.function === 'scrypt') {\n      kdfParams = json.crypto.kdf.params;\n      derivedKey = await scrypt(\n        Buffer.from(password),\n        Buffer.from(kdfParams.salt, 'hex'),\n        kdfParams.n,\n        kdfParams.r,\n        kdfParams.p,\n        kdfParams.dklen,\n      );\n    } else if (json.crypto.kdf.function === 'pbkdf2') {\n      kdfParams = json.crypto.kdf.params;\n\n      if (kdfParams.prf !== 'hmac-sha256') {\n        throw new Error('Unsupported parameters to PBKDF2');\n      }\n\n      derivedKey = crypto.pbkdf2Sync(\n        Buffer.from(password),\n        Buffer.from(kdfParams.salt, 'hex'),\n        kdfParams.c,\n        kdfParams.dklen,\n        'sha256',\n      );\n    } else {\n      throw new Error('Unsupported key derivation scheme');\n    }\n\n    const ciphertext = Buffer.from(json.crypto.cipher.message, 'hex');\n    const checksumBuffer = Buffer.concat([Buffer.from(derivedKey.slice(16, 32)), ciphertext]);\n    const hashFunctions: Record<string, any> = {\n      keccak256,\n      sha256,\n    };\n    const hashFunction: any = hashFunctions[json.crypto.checksum.function];\n    const mac: Buffer = hashFunction(checksumBuffer);\n    if (mac.toString('hex') !== json.crypto.checksum.message) {\n      throw new Error('Invalid password');\n    }\n\n    const decipher = crypto.createDecipheriv(\n      json.crypto.cipher.function,\n      derivedKey.slice(0, 16),\n      Buffer.from(json.crypto.cipher.params.iv, 'hex'),\n    );\n    const seed: Buffer = this.runCipherBuffer(decipher, ciphertext);\n    return new Wallet(seed);\n  }\n\n  /**\n   * @param cipher\n   * @param data\n   */\n  protected runCipherBuffer(cipher: crypto.Cipher | crypto.Decipher, data: Buffer): Buffer {\n    return Buffer.concat([cipher.update(data), cipher.final()]);\n  }\n\n  /**\n   * Convert byte array to string\n   * @param byteArray\n   */\n  static toHexString(byteArray: Uint8Array): string {\n    return Array.from(byteArray, (byte: number) => {\n      // eslint-disable-next-line no-bitwise\n      return (`0${(byte & 0xFF).toString(16)}`).slice(-2);\n    }).join('');\n  }\n}\n\nexport default EthereumKeyStore;\n", "import {\n  IsString,\n  IsDefined,\n  IsNotEmpty,\n  ValidateNested,\n  validateOrReject\n} from 'class-validator';\nimport { KeySharesDataV2 } from './KeySharesData/KeySharesDataV2';\n\nexport type KeySharesData = KeySharesDataV2;\n\n/**\n * Keyshares data interface.\n */\nexport class KeyShares {\n  static VERSION_V2 = 'v2';\n\n  @IsString()\n  @IsDefined()\n  @IsNotEmpty()\n  public version: string;\n\n  @ValidateNested()\n  public data: KeySharesData;\n\n  @IsString()\n  public payload: string;\n\n  /**\n   * Receives as parameter already read and json parsed structure.\n   * @param version\n   * @param data\n   * @param payload\n   */\n  constructor({ version, data, payload }: { version: string, data: KeySharesData, payload?: string }) {\n    this.version = version;\n    this.data = data;\n    this.payload = payload || '';\n  }\n\n  /**\n   * Set final payload for web3 transaction.\n   * @param payload\n   */\n  setPayload(payload: string): KeyShares {\n    this.payload = payload;\n    return this;\n  }\n\n  /**\n   * Instantiate keyshare from raw data as string or object.\n   * @param data\n   */\n  static async fromData(data: string | any): Promise<KeyShares> {\n    // Parse json\n    if (typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n\n    // Create keyshares data instance depending on version\n    let keySharesDataInstance: KeySharesData;\n    switch (data.version) {\n      case KeyShares.VERSION_V2:\n        keySharesDataInstance = new KeySharesDataV2(data.data);\n        break;\n      default:\n        throw Error(`Keyshares version is not supported: ${data.version}`);\n    }\n\n    // Create keyshares instance\n    const keyShares = new KeyShares({\n      version: data.version,\n      data: keySharesDataInstance,\n      payload: data.payload || '',\n    });\n\n    // Validate classes and structures\n    await validateOrReject(keyShares).catch(errors => {\n      throw Error(`Keyshares file have wrong format. Errors: ${JSON.stringify(errors, null, '  ')}`);\n    });\n\n    // Deeper validation of data itself\n    try {\n      await keyShares.data.validate();\n    } catch (errors: any) {\n      throw Error(`Keyshares data did not pass validation. Errors: ${errors.message || errors.stack || errors.trace || String(errors)}`);\n    }\n\n    return keyShares;\n  }\n\n  /**\n   * Stringify keyshare to be ready for saving in file.\n   */\n  toString(): string {\n    return JSON.stringify({\n      version: this.version,\n      data: this.data,\n      payload: this.payload || '',\n      createdAt: new Date().toISOString()\n    }, null, '  ');\n  }\n}\n", "import Web3 from 'web3';\nimport { decode } from 'js-base64';\nimport {\n  IsArray,\n  MinLength,\n  IsInt,\n  IsString,\n  Length,\n  ValidateNested\n} from 'class-validator';\nimport bls from '../../BLS';\nimport { operatorValidator } from '../../../commands/actions/validators/operator';\n\nconst web3 = new Web3();\n\n// ---------------------------------------------------------------\n// Structure interfaces\n// ---------------------------------------------------------------\n\nexport interface IOperatorV2 {\n  id: number,\n  publicKey: string\n}\n\nexport interface ISharesV2 {\n  publicKeys: string[],\n  encryptedKeys: string[]\n}\n\nexport interface IKeySharesParamsV2 {\n  operators: IOperatorV2[],\n  shares: ISharesV2,\n  publicKey: string,\n}\n\n// ---------------------------------------------------------------\n// Structure classes\n// ---------------------------------------------------------------\n\nexport class KeySharesKeysV2 {\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  publicKeys: string[];\n\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  encryptedKeys: string[];\n\n  constructor(publicKeys: string[], encryptedKeys: string[]) {\n    this.publicKeys = publicKeys;\n    this.encryptedKeys = encryptedKeys;\n  }\n}\n\nexport class OperatorV2 {\n  @IsInt()\n  public id: number;\n\n  @IsString()\n  @MinLength(98)\n  public publicKey: string;\n\n  constructor(id: number, publicKey: string) {\n    this.id = id;\n    this.publicKey = publicKey;\n  }\n}\n\nexport class KeySharesDataV2 {\n  @IsString()\n  @Length(98, 98)\n  public publicKey: string;\n\n  @ValidateNested()\n  public operators: OperatorV2[];\n\n  @ValidateNested()\n  public shares: KeySharesKeysV2;\n\n  constructor(data: IKeySharesParamsV2) {\n    this.publicKey = data.publicKey;\n    this.operators = data.operators.map(\n      (operator) => new OperatorV2(operator.id, operator.publicKey)\n    );\n    this.shares = new KeySharesKeysV2(data.shares.publicKeys, data.shares.encryptedKeys);\n  }\n\n  /**\n   * Get the list of shares public keys.\n   */\n  get sharesPublicKeys(): string[] {\n    return this.shares.publicKeys;\n  }\n\n  /**\n   * Get the list of encrypted shares.\n   */\n  get sharesEncryptedKeys(): string[] {\n    return this.shares.encryptedKeys;\n  }\n\n  /**\n   * Get the list of operators IDs.\n   */\n  get operatorIds(): number[] {\n    return this.operators.map(operator => operator.id);\n  }\n\n  /**\n   * Get the list of operators public keys.\n   */\n  get operatorPublicKeys(): string[] {\n    return this.operators.map(operator => operator.publicKey);\n  }\n\n  /**\n   * Try to BLS deserialize validator public key.\n   */\n  async validateValidatorPublicKey(): Promise<any> {\n    try {\n      bls.deserializeHexStrToPublicKey(this.publicKey.replace('0x', ''));\n    } catch (e) {\n      throw Error(`Can not BLS deserialize validator public key: ${this.publicKey}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * Try to BLS deserialize shares public keys.\n   */\n  async validateSharesPublicKeys(): Promise<any> {\n    let publicKeyWithError = '';\n    try {\n      for (const publicKey of this.sharesPublicKeys) {\n        publicKeyWithError = publicKey;\n        bls.deserializeHexStrToPublicKey(publicKey.replace('0x', ''));\n      }\n    } catch (e) {\n      throw Error(`Can not BLS deserialize shares public key: ${publicKeyWithError}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * If shares encrypted keys are ABI encoded - try to decode them.\n   */\n  async validateSharesEncryptedKeys(): Promise<any> {\n    let encryptedKeyWithError = '';\n    try {\n      this.sharesEncryptedKeys.map(encryptedKey => {\n        let key: any = encryptedKey;\n        // If the key is ABI encoded - decode it.\n        if (key.startsWith('0x')) {\n          encryptedKeyWithError = key;\n          key = web3.eth.abi.decodeParameter('string', encryptedKey);\n        }\n        // ABI decoded key then should be a valid base 64 string\n        decode(String(key));\n      });\n    } catch (e) {\n      throw Error(`Can not ABI decode shares encrypted key: ${encryptedKeyWithError}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * Check that counts are consistent.\n   */\n  async validateCounts(): Promise<any> {\n    if (this.operatorIds.length !== this.sharesEncryptedKeys.length\n      || this.operatorIds.length !== this.sharesPublicKeys.length\n      || this.operatorIds.length !== this.operatorPublicKeys.length) {\n      throw Error('Length of operators and shares should be equal.');\n    }\n  }\n\n  /**\n   * Go over operator public keys and try to check if they are:\n   * 1) valid base 64 strings\n   * 2) when base 64 decoded - valid RSA public key\n   */\n  async validateOperatorsPublicKeys(): Promise<any> {\n    for (const operatorPublicKey of this.operatorPublicKeys) {\n      const result = await operatorValidator(operatorPublicKey);\n      if (result !== true) {\n        throw Error(String(result));\n      }\n    }\n  }\n\n  /**\n   * Do all possible validations.\n   */\n  async validate(): Promise<any> {\n    await bls.init(bls.BLS12_381);\n    await this.validateCounts();\n    await this.validateSharesPublicKeys();\n    await this.validateValidatorPublicKey();\n    await this.validateSharesEncryptedKeys();\n    await this.validateOperatorsPublicKeys();\n  }\n}\n", "import { decode } from 'js-base64';\nimport JSEncrypt from '../../../lib/JSEncrypt';\nimport { InvalidOperatorKeyException } from '../../../lib/Encryption/Encryption';\n\nexport const operatorValidator = async (operator: string): Promise<string | boolean> => {\n  try {\n    const errorMessage = 'Invalid operator key format, make sure the operator exists in the network';\n    const decodedOperator = decode(operator);\n    if (!decodedOperator.startsWith('-----BEGIN RSA PUBLIC KEY-----')) {\n      throw Error(errorMessage);\n    }\n    const encrypt = new JSEncrypt({});\n    try {\n      encrypt.setPublicKey(decodedOperator);\n    } catch (error) {\n      throw new InvalidOperatorKeyException(\n        {\n          rsa: decodedOperator,\n          base64: operator,\n        },\n        errorMessage,\n      );\n    }\n    return true;\n  } catch (e) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const { message } = e;\n    return message;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
