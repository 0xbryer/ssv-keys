{
  "version": 3,
  "sources": ["../../src/lib/SSVKeys.ts", "../../src/lib/BLS/index.ts", "../../src/lib/Threshold/Threshold.ts", "../../src/lib/Encryption/Encryption.ts", "../../src/lib/JSEncrypt/index.ts", "../../src/lib/EthereumKeyStore/EthereumKeyStore.ts", "../../src/lib/KeyShares/KeyShares.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesDataV2.ts", "../../src/commands/actions/validators/operator.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesPayloadV2.ts"],
  "sourcesContent": ["import atob from 'atob';\nimport Web3 from 'web3';\nimport { encode } from 'js-base64';\nimport EthereumKeyStore from 'eth2-keystore-js';\nimport { KeyShares } from './KeyShares/KeyShares';\nimport Threshold, { IShares, ISharesKeyPairs } from './Threshold';\nimport Encryption, { EncryptShare } from './Encryption/Encryption';\n\n\n/**\n * SSVKeys class provides high-level methods to easily work with entire flow:\n *  - getting private key from keystore file using password\n *  - creating shares threshold\n *  - creating final shares\n *  - building final payload which is ready to be used in web3 transaction\n */\nexport class SSVKeys {\n  static SHARES_FORMAT_ABI = 'abi';\n\n  protected web3Instances: any = {};\n  protected threshold: ISharesKeyPairs | undefined;\n\n  /**\n   * Getting instance of web3\n   * @param nodeUrl\n   */\n  getWeb3(nodeUrl = process.env.NODE_URL || ''): Web3 {\n    if (!this.web3Instances[nodeUrl]) {\n      this.web3Instances[nodeUrl] = new Web3(String(nodeUrl || ''))\n    }\n    return this.web3Instances[nodeUrl];\n  }\n\n  /**\n   * Extract private key from keystore data using keystore password.\n   * Generally can be used in browsers when the keystore data has been provided by browser.\n   * @param data\n   * @param password\n   */\n  async getPrivateKeyFromKeystoreData(data: string, password: string): Promise<string> {\n    try {\n      try {\n        // Try to json parse the data before\n        data = JSON.parse(data);\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n\n      const keyStore = new EthereumKeyStore(data);\n      return await keyStore.getPrivateKey(password).then((privateKey: string) => privateKey);\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Build threshold using private key for number of participants and failed participants.\n   * @param privateKey\n   * @param operators\n   */\n  async createThreshold(privateKey: string, operators: number[]): Promise<ISharesKeyPairs> {\n    try {\n      const threshold: Threshold = new Threshold();\n      this.threshold = await threshold.create(privateKey, operators);\n      return this.threshold;\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Encrypt operators shares using operators public keys.\n   * @param operatorsPublicKeys\n   * @param shares\n   * @param sharesFormat\n   */\n  async encryptShares(operatorsPublicKeys: string[], shares: IShares[], sharesFormat = ''): Promise<EncryptShare[]> {\n    try {\n      const decodedOperators = operatorsPublicKeys.map((operator: string) => String(encode(atob(operator))));\n      const encryptedShares = new Encryption(decodedOperators, shares).encrypt();\n      return encryptedShares.map((share: EncryptShare) => {\n        share.operatorPublicKey = encode(share.operatorPublicKey);\n        if (sharesFormat === SSVKeys.SHARES_FORMAT_ABI) {\n          share.operatorPublicKey = this.getWeb3().eth.abi.encodeParameter('string', share.operatorPublicKey);\n          share.privateKey = this.getWeb3().eth.abi.encodeParameter('string', share.privateKey);\n        }\n        return share;\n      });\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Build shares from private key, operator IDs and public keys\n   * @param privateKey\n   * @param operatorIds\n   * @param operatorPublicKeys\n   */\n  async buildShares(privateKey: string, operatorIds: number[], operatorPublicKeys: string[]): Promise<EncryptShare[]> {\n    const threshold = await this.createThreshold(privateKey, operatorIds);\n    return this.encryptShares(operatorPublicKeys, threshold.shares);\n  }\n\n  /**\n   * Getting threshold if it has been created before.\n   */\n  getThreshold()  {\n    return this.threshold;\n  }\n\n  /**\n   * Getting public key of validator\n   */\n  getValidatorPublicKey(): string {\n    return this.getThreshold()?.validatorPublicKey || '';\n  }\n\n  /**\n   * Encode with Web3 eth abi method any fields of shares array required for transaction.\n   * @param encryptedShares\n   * @param field\n   */\n  abiEncode(encryptedShares: any[], field?: string): string[] {\n    return encryptedShares.map(share => {\n      const value = field ? Object(share)[field] : share;\n      if (String(value).startsWith('0x')) {\n        return value;\n      }\n      return this.getWeb3().eth.abi.encodeParameter('string', value);\n    });\n  }\n\n  /**\n   * Build payload from encrypted shares, validator public key and operator IDs\n   * @param validatorPublicKey\n   * @param operatorsIds\n   * @param encryptedShares\n   * @param ssvAmount\n   */\n  buildPayload(validatorPublicKey: string,\n               operatorsIds: number[],\n               encryptedShares: EncryptShare[],\n               ssvAmount: string | number): any {\n    const sharePublicKeys: string[] = encryptedShares.map((share: EncryptShare) => share.publicKey);\n    const sharePrivateKeys: string[] = this.abiEncode(encryptedShares, 'privateKey');\n    return [\n      validatorPublicKey,\n      operatorsIds.join(','),\n      sharePublicKeys,\n      sharePrivateKeys,\n      ssvAmount,\n    ];\n  }\n\n  /**\n   * Build payload from keyshares file with operators and shares details inside.\n   * If ssv amount is not provided - it will be taken from keyshares file if exist there or set to 0.\n   * @param keyShares\n   * @param ssvAmount\n   */\n  buildPayloadFromKeyShares(keyShares: KeyShares, ssvAmount?: string | number): any {\n    const publicKeys = keyShares.data?.shares?.publicKeys || [];\n    const encryptedKeys = keyShares.data?.shares?.encryptedKeys || [];\n    const operatorPublicKeys = keyShares.data?.operatorPublicKeys || [];\n\n    if (publicKeys.length !== encryptedKeys.length\n      || publicKeys.length !== operatorPublicKeys.length\n      || encryptedKeys.length !== operatorPublicKeys.length\n      || !encryptedKeys.length\n      || !operatorPublicKeys.length\n      || !publicKeys.length\n    ) {\n      throw Error('Operator public keys and shares public/encrypted keys length does not match or have zero length.');\n    }\n\n    return [\n      keyShares.data?.publicKey,\n      keyShares.data?.operatorIds?.join(',') || '',\n      publicKeys,\n      this.abiEncode(encryptedKeys),\n      ssvAmount || keyShares.payload?.readable?.ssvAmount || 0,\n    ];\n  }\n}\n", "let index: any;\n\ntry {\n  window.crypto;\n  index = require('bls-eth-wasm/browser');\n} catch {\n  index = require('bls-eth-wasm');\n}\n\nexport default index;\n", "import { SecretKeyType } from 'bls-eth-wasm';\nimport bls from '../BLS';\n\nexport interface IShares {\n    privateKey: string,\n    publicKey: string,\n    id?: any\n}\n\nexport interface ISharesKeyPairs {\n    validatorPrivateKey: string,\n    validatorPublicKey: string,\n    shares: IShares[]\n}\n\nexport class ThresholdInvalidOperatorsLengthError extends Error {\n  public operators: number[];\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(operators: number[], message: string) {\n    super(message);\n    this.operators = operators;\n  }\n}\n\nexport class ThresholdInvalidOperatorIdError extends Error {\n  public operator: any;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(operator: any, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\n/**\n * Building threshold for list of operator IDs\n */\nclass Threshold {\n    protected validatorPublicKey: any;\n    protected validatorPrivateKey: any;\n    protected shares: Array<any> = [];\n\n    static get DEFAULT_THRESHOLD_NUMBER(): number {\n      return 3;\n    }\n\n    /**\n     * Receives list of operators IDs.\n     *  len(operator IDs) := 3 * F + 1\n     *\n     * If F calculated from this formula is not integer number - it will raise exception.\n     * Generate keys and return promise\n     */\n    async create(privateKey: string, operators: number[]): Promise<ISharesKeyPairs> {\n        // Validation\n        operators.map(operator => {\n          if (!Number.isInteger(operator)) {\n            throw new ThresholdInvalidOperatorIdError(\n              operator,\n              `Operator must be integer. Got: ${String(operator)}`\n            );\n          }\n        });\n\n        const F = (operators.length - 1) / 3;\n        if (!Number.isInteger(F)) {\n          throw new ThresholdInvalidOperatorsLengthError(\n            operators,\n            'Invalid operators length. It should satisfy conditions: \u2016 Operators \u2016 := 3 * F + 1 ; F \u2208 \u2115'\n          );\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n                bls.init(bls.BLS12_381)\n                    .then(() => {\n                        const msk = [];\n                        const mpk = [];\n\n                        // Master key Polynomial\n                        this.validatorPrivateKey = bls.deserializeHexStrToSecretKey(privateKey);\n                        this.validatorPublicKey = this.validatorPrivateKey.getPublicKey();\n\n                        msk.push(this.validatorPrivateKey);\n                        mpk.push(this.validatorPublicKey);\n\n                        // Construct poly\n                        for (let i = 1; i < operators.length - F; i += 1) {\n                            const sk: SecretKeyType = new bls.SecretKey();\n                            sk.setByCSPRNG();\n                            msk.push(sk);\n                            const pk = sk.getPublicKey();\n                            mpk.push(pk);\n                        }\n\n                        // Evaluate shares - starting from 1 because 0 is master key\n                        for (const operatorId of operators) {\n                            const id = new bls.Id();\n                            id.setInt(operatorId);\n                            const shareSecretKey = new bls.SecretKey();\n                            shareSecretKey.share(msk, id);\n\n                            const sharePublicKey = new bls.PublicKey();\n                            sharePublicKey.share(mpk, id);\n\n                            this.shares.push({\n                                privateKey: `0x${shareSecretKey.serializeToHexStr()}`,\n                                publicKey: `0x${sharePublicKey.serializeToHexStr()}`,\n                                id,\n                            });\n                        }\n\n                        const response: ISharesKeyPairs = {\n                            validatorPrivateKey: `0x${this.validatorPrivateKey.serializeToHexStr()}`,\n                            validatorPublicKey: `0x${this.validatorPublicKey.serializeToHexStr()}`,\n                            shares: this.shares,\n                        };\n                        resolve(response);\n                    });\n            } catch (error: any) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Threshold;\n", "import {decode, encode} from 'js-base64';\nimport JSEncrypt from '../JSEncrypt';\nimport { IShares } from '../Threshold';\n\nexport class InvalidOperatorKeyException extends Error {\n  public operator: any;\n\n  constructor(operator: { rsa: string, base64: string }, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\nexport interface EncryptShare {\n    operatorPublicKey: string,\n    privateKey: string,\n    publicKey: string\n}\n\nexport default class Encryption {\n    private readonly operators: string[];\n    private readonly shares: IShares[];\n\n  RAW_OPERATOR_PUBLIC_KEY_SIGNATURE = RegExp(/------BEGIN RSA PUBLIC KEY-----/, 'gmi');\n\n  constructor(operators: string[], shares: IShares[]) {\n    this.operators = operators.map((publicKey: string) => {\n      if (this.RAW_OPERATOR_PUBLIC_KEY_SIGNATURE.test(publicKey)) {\n        return publicKey;\n      }\n      return decode(publicKey);\n    });\n    this.shares = shares;\n  }\n\n    encrypt(): EncryptShare[] {\n        const encryptedShares: EncryptShare[] = [];\n        Object.keys(this.operators).forEach((operator: any) => {\n            const encrypt = new JSEncrypt({});\n            try {\n              encrypt.setPublicKey(this.operators[operator]);\n            } catch (error) {\n              throw new InvalidOperatorKeyException(\n                {\n                  rsa: this.operators[operator],\n                  base64: encode(this.operators[operator]),\n                },\n                `Operator is not valid RSA Public Key: ${error}`\n              );\n            }\n            const encrypted = encrypt.encrypt(this.shares[operator].privateKey);\n            const encryptedShare: EncryptShare = {\n                operatorPublicKey: this.operators[operator],\n                privateKey: String(encrypted),\n                publicKey: this.shares[operator].publicKey,\n            };\n            encryptedShares.push(encryptedShare);\n            return encryptedShare;\n        });\n        return encryptedShares;\n    }\n}\n", "let index: any;\n\ntry {\n  window.crypto;\n  index = require('jsencrypt').JSEncrypt;\n} catch {\n  index = require('node-jsencrypt');\n}\n\nexport default index;\n", "import crypto from 'crypto';\nimport { scrypt } from 'scrypt-js';\nimport Wallet from 'ethereumjs-wallet';\nimport { keccak256, sha256 } from 'ethereumjs-util';\n\ninterface V4Keystore {\n  crypto: {\n    kdf: {\n      function: string,\n      params: {\n        dklen: number,\n        n: number,\n        r: number,\n        p: number,\n        salt: string\n      },\n      message: string\n    },\n    checksum: {\n      function: string,\n      params: any,\n      message: string\n    },\n    cipher: {\n      function: string,\n      params: {\n        iv: string\n      },\n      message: string\n    }\n  },\n  description: string,\n  pubkey: string,\n  path: string,\n  uuid: string\n  version: number\n}\n\n/**\n * Decrypt private key from key store data\n * Supports key store versions: v1, v3, v4\n *\n * Example of usage (Node env):\n *\n *  const keyStoreFilePath = path.join(process.cwd(), 'validator_keys', 'keystore.json');\n *  const keyStoreString: string = fs.readFileSync(keyStoreFilePath).toString();\n *  const keyStoreData = JSON.parse(keyStoreString);\n *  const keyStore = new EthereumKeyStore(keyStoreData);\n *  const password = 'testtest';\n *  console.log('Private Key:', await keyStore.getPrivateKey(password));\n */\nclass EthereumKeyStore {\n  private readonly keyStoreData: any;\n  private privateKey = '';\n  private wallet: Wallet | undefined;\n\n  /**\n   * Receive key store data from string or parsed JSON\n   * @param keyStoreData\n   */\n  constructor(keyStoreData: string | never) {\n    if (!keyStoreData) {\n      throw new Error('Key store data should be JSON or string');\n    }\n    this.keyStoreData = JSON.parse(String(keyStoreData));\n    if (!this.keyStoreData.version) {\n      throw new Error('Invalid keystore file');\n    }\n  }\n\n  getPublicKey(): string {\n    if (this.keyStoreData) {\n      switch (this.keyStoreData.version ?? this.keyStoreData.Version) {\n        case 1:\n          return this.keyStoreData.Address;\n        case 3:\n          return this.keyStoreData.id;\n        case 4:\n          return this.keyStoreData.pubkey;\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Decrypt private key using user password\n   * @param password\n   */\n  async getPrivateKey(password = ''): Promise<string> {\n    // In case private key exist we return it\n    if (this.privateKey) return this.privateKey;\n    switch (this.keyStoreData.version) {\n      case 1:\n        this.wallet = await Wallet.fromV1(this.keyStoreData, password);\n        break;\n      case 3:\n        this.wallet = await Wallet.fromV3(this.keyStoreData, password, true);\n        break;\n      case 4:\n        this.wallet = await this.fromV4(this.keyStoreData, password);\n        break;\n    }\n    if (this.wallet) {\n      this.privateKey = this.wallet.getPrivateKey().toString('hex');\n      if (!this.privateKey) {\n        throw new Error('Invalid password');\n      }\n    }\n    return this.privateKey;\n  }\n\n  /**\n   * Import a wallet (Version 4 of the Ethereum wallet format).\n   *\n   * @param input A JSON serialized string, or an object representing V3 Keystore.\n   * @param password The keystore password.\n   */\n  public async fromV4(\n    input: string | V4Keystore,\n    password: string,\n  ): Promise<Wallet> {\n    const json: V4Keystore = typeof input === 'object' ? input : JSON.parse(input);\n\n    if (json.version !== 4) {\n      throw new Error('Not a V4 wallet');\n    }\n\n    let derivedKey: Uint8Array;\n    let kdfParams: any;\n    if (json.crypto.kdf.function === 'scrypt') {\n      kdfParams = json.crypto.kdf.params;\n      derivedKey = await scrypt(\n        Buffer.from(password),\n        Buffer.from(kdfParams.salt, 'hex'),\n        kdfParams.n,\n        kdfParams.r,\n        kdfParams.p,\n        kdfParams.dklen,\n      );\n    } else if (json.crypto.kdf.function === 'pbkdf2') {\n      kdfParams = json.crypto.kdf.params;\n\n      if (kdfParams.prf !== 'hmac-sha256') {\n        throw new Error('Unsupported parameters to PBKDF2');\n      }\n\n      derivedKey = crypto.pbkdf2Sync(\n        Buffer.from(password),\n        Buffer.from(kdfParams.salt, 'hex'),\n        kdfParams.c,\n        kdfParams.dklen,\n        'sha256',\n      );\n    } else {\n      throw new Error('Unsupported key derivation scheme');\n    }\n\n    const ciphertext = Buffer.from(json.crypto.cipher.message, 'hex');\n    const checksumBuffer = Buffer.concat([Buffer.from(derivedKey.slice(16, 32)), ciphertext]);\n    const hashFunctions: Record<string, any> = {\n      keccak256,\n      sha256,\n    };\n    const hashFunction: any = hashFunctions[json.crypto.checksum.function];\n    const mac: Buffer = hashFunction(checksumBuffer);\n    if (mac.toString('hex') !== json.crypto.checksum.message) {\n      throw new Error('Invalid password');\n    }\n\n    const decipher = crypto.createDecipheriv(\n      json.crypto.cipher.function,\n      derivedKey.slice(0, 16),\n      Buffer.from(json.crypto.cipher.params.iv, 'hex'),\n    );\n    const seed: Buffer = this.runCipherBuffer(decipher, ciphertext);\n    return new Wallet(seed);\n  }\n\n  /**\n   * @param cipher\n   * @param data\n   */\n  protected runCipherBuffer(cipher: crypto.Cipher | crypto.Decipher, data: Buffer): Buffer {\n    return Buffer.concat([cipher.update(data), cipher.final()]);\n  }\n\n  /**\n   * Convert byte array to string\n   * @param byteArray\n   */\n  static toHexString(byteArray: Uint8Array): string {\n    return Array.from(byteArray, (byte: number) => {\n      // eslint-disable-next-line no-bitwise\n      return (`0${(byte & 0xFF).toString(16)}`).slice(-2);\n    }).join('');\n  }\n}\n\nexport default EthereumKeyStore;\n", "import _ from 'underscore';\nimport {\n  IsString,\n  IsDefined,\n  IsNotEmpty,\n  ValidateNested,\n  validateOrReject\n} from 'class-validator';\nimport { KeySharesDataV2 } from './KeySharesData/KeySharesDataV2';\nimport { KeySharesPayloadV2 } from './KeySharesData/KeySharesPayloadV2';\n\nexport type KeySharesData = KeySharesDataV2;\nexport type KeySharesPayload = KeySharesPayloadV2;\n\n/**\n * Keyshares data interface.\n */\nexport class KeyShares {\n  static VERSION_V2 = 'v2';\n  static PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY = 0;\n  static PAYLOAD_INDEX_OPERATOR_IDS = 1;\n  static PAYLOAD_INDEX_SHARE_PUBLIC_KEYS = 2;\n  static PAYLOAD_INDEX_SHARE_PRIVATE_KEYS = 3;\n  static PAYLOAD_INDEX_SSV_AMOUNT = 4;\n\n  @IsString()\n  @IsDefined()\n  @IsNotEmpty()\n  public version: string;\n\n  @ValidateNested()\n  public data?: KeySharesData | undefined;\n\n  @ValidateNested()\n  public payload?: KeySharesPayload | undefined;\n\n  /**\n   * @param version\n   */\n  constructor({ version }: { version: string }) {\n    this.version = version;\n  }\n\n  /**\n   * Set final payload for web3 transaction and validate it.\n   * @param payload\n   */\n  async setPayload(payload: any): Promise<KeyShares> {\n    if (payload) {\n      this.payload = this.usePayload(payload, this.version);\n      await this.validatePayload();\n    }\n    return this;\n  }\n\n  /**\n   * Set new data and validate it.\n   * @param data KeySharesData\n   */\n  async setData(data: any): Promise<KeyShares> {\n    if (data) {\n      this.data = this.useData(data, this.version);\n      await this.validateData();\n    }\n    return this;\n  }\n\n  /**\n   * Instantiate keyshare from raw data as string or object.\n   * @param data\n   */\n  static async fromData(data: string | any): Promise<KeyShares> {\n    // Parse json\n    if (typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n    const keyShares = new KeyShares({ version: data.version });\n    await keyShares.setData(data.data);\n    await keyShares.setPayload(data.payload);\n    await keyShares.validate();\n    return keyShares;\n  }\n\n  /**\n   * Get final data converted from raw data.\n   * @param payload\n   * @param version\n   */\n  usePayload(payload: any, version: string) {\n    if (_.isArray(payload)) {\n      payload = {\n        readable: {\n          validatorPublicKey: payload[KeyShares.PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY],\n          operatorIds: payload[KeyShares.PAYLOAD_INDEX_OPERATOR_IDS],\n          sharePublicKeys: payload[KeyShares.PAYLOAD_INDEX_SHARE_PUBLIC_KEYS],\n          sharePrivateKey: payload[KeyShares.PAYLOAD_INDEX_SHARE_PRIVATE_KEYS],\n          ssvAmount: payload[KeyShares.PAYLOAD_INDEX_SSV_AMOUNT],\n        },\n        raw: payload.join(','),\n      };\n    }\n    payload = {\n      ...JSON.parse(JSON.stringify(this.payload || {})),\n      ...JSON.parse(JSON.stringify(payload || {})),\n    };\n    switch (version) {\n      case KeyShares.VERSION_V2:\n        return new KeySharesPayloadV2(payload);\n      default:\n        throw Error(`Keyshares version is not supported: ${version}`);\n    }\n  }\n\n  /**\n   * Get final data converted from raw data.\n   * @param data\n   * @param version\n   */\n  useData(data: any, version: string) {\n    data = {\n      ...JSON.parse(JSON.stringify(this.data || {})),\n      ...JSON.parse(JSON.stringify(data || {})),\n    };\n    if (_.isArray(data.shares)) {\n      data.shares = {\n        publicKeys: data.shares.map((share: { publicKey: string; }) => share.publicKey),\n        encryptedKeys: data.shares.map((share: { privateKey: string; }) => share.privateKey),\n      }\n    }\n    switch (version) {\n      case KeyShares.VERSION_V2:\n        return new KeySharesDataV2(data);\n      default:\n        throw Error(`Keyshares version is not supported: ${version}`);\n    }\n  }\n\n  /**\n   * Validate everything\n   */\n  async validate() {\n    // Validate classes and structures\n    await validateOrReject(this).catch(errors => {\n      throw Error(`Keyshares file have wrong format. Errors: ${JSON.stringify(errors, null, '  ')}`);\n    });\n\n    // Validate data and payload\n    await this.validateData();\n    await this.validatePayload();\n  }\n\n  /**\n   * Validate payload\n   */\n  async validatePayload() {\n    try {\n      await this.payload?.validate();\n    } catch (errors: any) {\n      throw Error(`Keyshares payload did not pass validation. Errors: ${errors.message || errors.stack || errors.trace || String(errors)}`);\n    }\n  }\n\n  /**\n   * Validate data\n   */\n  async validateData() {\n    try {\n      await this.data?.validate();\n    } catch (errors: any) {\n      throw Error(`Keyshares data did not pass validation. Errors: ${errors.message || errors.stack || errors.trace || String(errors)}`);\n    }\n  }\n\n  /**\n   * Stringify keyshare to be ready for saving in file.\n   */\n  toString(): string {\n    return JSON.stringify({\n      version: this.version,\n      data: this.data || null,\n      payload: this.payload || null,\n      createdAt: new Date().toISOString()\n    }, null, '  ');\n  }\n}\n", "import Web3 from 'web3';\nimport { decode } from 'js-base64';\nimport {\n  IsArray,\n  MinLength,\n  IsInt,\n  IsString,\n  Length,\n  ValidateNested, IsOptional\n} from 'class-validator';\nimport bls from '../../BLS';\nimport { operatorValidator } from '../../../commands/actions/validators/operator';\n\nconst web3 = new Web3();\n\n// ---------------------------------------------------------------\n// Structure interfaces\n// ---------------------------------------------------------------\n\nexport interface IOperatorV2 {\n  id: number,\n  publicKey: string\n}\n\nexport interface ISharesV2 {\n  publicKeys: string[],\n  encryptedKeys: string[]\n}\n\nexport interface IKeySharesParamsV2 {\n  operators?: IOperatorV2[],\n  shares?: ISharesV2,\n  publicKey?: string,\n}\n\n// ---------------------------------------------------------------\n// Structure classes\n// ---------------------------------------------------------------\n\nexport class KeySharesKeysV2 {\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  publicKeys: string[];\n\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  encryptedKeys: string[];\n\n  constructor(publicKeys: string[], encryptedKeys: string[]) {\n    this.publicKeys = publicKeys;\n    this.encryptedKeys = encryptedKeys;\n  }\n}\n\nexport class OperatorV2 {\n  @IsInt()\n  public id: number;\n\n  @IsString()\n  @MinLength(98)\n  public publicKey: string;\n\n  constructor(id: number, publicKey: string) {\n    this.id = id;\n    this.publicKey = publicKey;\n  }\n}\n\nexport class KeySharesDataV2 {\n  @IsString()\n  @Length(98, 98)\n  public publicKey?: string;\n\n  @ValidateNested()\n  public operators?: OperatorV2[];\n\n  @IsOptional()\n  @ValidateNested()\n  public shares?: KeySharesKeysV2 | null;\n\n  constructor(data: IKeySharesParamsV2) {\n    if (data.publicKey) {\n      this.publicKey = data.publicKey;\n    }\n    if (data.operators) {\n      this.operators = data.operators.map(\n        (operator) => new OperatorV2(operator.id, operator.publicKey)\n      );\n    }\n    if (data.shares) {\n      this.shares = new KeySharesKeysV2(data.shares.publicKeys, data.shares.encryptedKeys);\n    }\n  }\n\n  /**\n   * Get the list of shares public keys.\n   */\n  get sharesPublicKeys(): string[] | null {\n    return this.shares?.publicKeys || null;\n  }\n\n  /**\n   * Get the list of encrypted shares.\n   */\n  get sharesEncryptedKeys(): string[] | null {\n    return this.shares?.encryptedKeys || null;\n  }\n\n  /**\n   * Get the list of operators IDs.\n   */\n  get operatorIds(): number[] | null {\n    if (!this.operators?.length) {\n      return null;\n    }\n    return this.operators.map(operator => operator.id);\n  }\n\n  /**\n   * Get the list of operators public keys.\n   */\n  get operatorPublicKeys(): string[] | null {\n    if (!this.operators?.length) {\n      return null;\n    }\n    return this.operators.map(operator => operator.publicKey);\n  }\n\n  /**\n   * Try to BLS deserialize validator public key.\n   */\n  async validateValidatorPublicKey(): Promise<any> {\n    if (!this.publicKey) {\n      return;\n    }\n    try {\n      bls.deserializeHexStrToPublicKey(this.publicKey.replace('0x', ''));\n    } catch (e) {\n      throw Error(`Can not BLS deserialize validator public key: ${this.publicKey}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * Try to BLS deserialize shares public keys.\n   */\n  async validateSharesPublicKeys(): Promise<any> {\n    if (!this.sharesPublicKeys?.length) {\n      return;\n    }\n    let publicKeyWithError = '';\n    try {\n      for (const publicKey of this.sharesPublicKeys) {\n        publicKeyWithError = publicKey;\n        bls.deserializeHexStrToPublicKey(publicKey.replace('0x', ''));\n      }\n    } catch (e) {\n      throw Error(`Can not BLS deserialize shares public key: ${publicKeyWithError}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * If shares encrypted keys are ABI encoded - try to decode them.\n   */\n  async validateSharesEncryptedKeys(): Promise<any> {\n    if (!this.sharesEncryptedKeys?.length) {\n      return;\n    }\n    let encryptedKeyWithError = '';\n    try {\n      this.sharesEncryptedKeys.map(encryptedKey => {\n        let key: any = encryptedKey;\n        // If the key is ABI encoded - decode it.\n        if (key.startsWith('0x')) {\n          encryptedKeyWithError = key;\n          key = web3.eth.abi.decodeParameter('string', encryptedKey);\n        }\n        // ABI decoded key then should be a valid base 64 string\n        decode(String(key));\n      });\n    } catch (e) {\n      throw Error(`Can not ABI decode shares encrypted key: ${encryptedKeyWithError}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * Check that counts are consistent.\n   */\n  async validateCounts(): Promise<any> {\n    if (!this.sharesEncryptedKeys?.length || !this.sharesPublicKeys?.length) {\n      return;\n    }\n    if (this.operatorIds?.length !== this.sharesEncryptedKeys.length\n      || this.operatorIds?.length !== this.sharesPublicKeys.length\n      || this.operatorIds?.length !== this.operatorPublicKeys?.length) {\n      throw Error('Length of operators and shares should be equal.');\n    }\n  }\n\n  /**\n   * Go over operator public keys and try to check if they are:\n   * 1) valid base 64 strings\n   * 2) when base 64 decoded - valid RSA public key\n   */\n  async validateOperatorsPublicKeys(): Promise<any> {\n    for (const operatorPublicKey of this.operatorPublicKeys || []) {\n      const result = await operatorValidator(operatorPublicKey);\n      if (result !== true) {\n        throw Error(String(result));\n      }\n    }\n  }\n\n  /**\n   * Do all possible validations.\n   */\n  async validate(): Promise<any> {\n    await bls.init(bls.BLS12_381);\n    await this.validateCounts();\n    await this.validateSharesPublicKeys();\n    await this.validateValidatorPublicKey();\n    await this.validateSharesEncryptedKeys();\n    await this.validateOperatorsPublicKeys();\n  }\n}\n", "import { decode } from 'js-base64';\nimport JSEncrypt from '../../../lib/JSEncrypt';\nimport { InvalidOperatorKeyException } from '../../../lib/Encryption/Encryption';\n\nexport const operatorValidator = async (operator: string): Promise<string | boolean> => {\n  try {\n    const errorMessage = 'Invalid operator key format, make sure the operator exists in the network';\n    const decodedOperator = decode(operator);\n    if (!decodedOperator.startsWith('-----BEGIN RSA PUBLIC KEY-----')) {\n      throw Error(errorMessage);\n    }\n    const encrypt = new JSEncrypt({});\n    try {\n      encrypt.setPublicKey(decodedOperator);\n    } catch (error) {\n      throw new InvalidOperatorKeyException(\n        {\n          rsa: decodedOperator,\n          base64: operator,\n        },\n        errorMessage,\n      );\n    }\n    return true;\n  } catch (e) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const { message } = e;\n    return message;\n  }\n}\n", "import { IsString, IsObject } from 'class-validator';\n\n// ---------------------------------------------------------------\n// Structure interfaces\n// ---------------------------------------------------------------\n\nexport interface IKeySharesPayloadV2 {\n  readable?: any,\n  raw?: string\n}\n\n// ---------------------------------------------------------------\n// Structure classes\n// ---------------------------------------------------------------\n\nexport class KeySharesPayloadV2 {\n  @IsObject()\n  public readable: any = {};\n\n  @IsString()\n  public raw = '';\n\n\n  constructor(data: IKeySharesPayloadV2) {\n    this.readable = data.readable || {};\n    this.raw = data.raw || '';\n  }\n\n  /**\n   * Do all possible validations.\n   */\n  async validate(): Promise<any> {\n    // Find out how final payload can be validated.\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_atob", "import_web3", "import_js_base64", "import_eth2_keystore_js", "index", "e", "BLS_default", "ThresholdInvalidOperatorsLengthError", "operators", "message", "ThresholdInvalidOperatorIdError", "operator", "Threshold", "privateKey", "__async", "F", "resolve", "reject", "BLS_default", "msk", "mpk", "i", "sk", "pk", "operatorId", "id", "shareSecretKey", "sharePublicKey", "response", "error", "Threshold_default", "import_js_base64", "index", "e", "JSEncrypt_default", "InvalidOperatorKeyException", "operator", "message", "Encryption", "operators", "shares", "publicKey", "encryptedShares", "encrypt", "JSEncrypt_default", "error", "encrypted", "encryptedShare", "_SSVKeys", "nodeUrl", "Web3", "data", "password", "__async", "e", "EthereumKeyStore", "privateKey", "error", "operators", "threshold", "Threshold_default", "operatorsPublicKeys", "shares", "sharesFormat", "decodedOperators", "operator", "atob", "Encryption", "share", "operatorIds", "operatorPublicKeys", "_a", "encryptedShares", "field", "value", "validatorPublicKey", "operatorsIds", "ssvAmount", "sharePublicKeys", "sharePrivateKeys", "keyShares", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "publicKeys", "encryptedKeys", "SSVKeys", "import_crypto", "import_scrypt_js", "import_ethereumjs_wallet", "import_ethereumjs_util", "EthereumKeyStore", "keyStoreData", "_a", "password", "__async", "Wallet", "input", "json", "derivedKey", "kdfParams", "crypto", "ciphertext", "checksumBuffer", "hashFunction", "decipher", "seed", "cipher", "data", "byteArray", "byte", "EthereumKeyStore_default", "import_underscore", "import_class_validator", "KeySharesDataV2_exports", "__export", "KeySharesDataV2", "KeySharesKeysV2", "OperatorV2", "import_web3", "import_js_base64", "import_class_validator", "import_js_base64", "operatorValidator", "operator", "__async", "errorMessage", "decodedOperator", "encrypt", "JSEncrypt_default", "error", "InvalidOperatorKeyException", "e", "message", "web3", "Web3", "KeySharesKeysV2", "publicKeys", "encryptedKeys", "__decorateClass", "OperatorV2", "id", "publicKey", "KeySharesDataV2", "data", "operator", "_a", "__async", "BLS_default", "e", "publicKeyWithError", "encryptedKeyWithError", "encryptedKey", "key", "_b", "_c", "_d", "_e", "_f", "operatorPublicKey", "result", "operatorValidator", "import_class_validator", "KeySharesPayloadV2", "data", "__async", "__decorateClass", "_KeyShares", "version", "payload", "__async", "data", "keyShares", "_", "__spreadValues", "KeySharesPayloadV2", "share", "KeySharesDataV2", "errors", "_a", "KeyShares", "__decorateClass"]
}
