{
  "version": 3,
  "sources": ["../../src/lib/SSVKeys.ts", "../../src/lib/KeyShares/KeyShares.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesDataV2.ts", "../../src/lib/BLS/index.ts", "../../src/lib/KeyShares/KeySharesData/OperatorDataV2.ts", "../../src/commands/actions/validators/operator.ts", "../../src/lib/JSEncrypt/index.ts", "../../src/lib/Encryption/Encryption.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesKeysV2.ts", "../../src/lib/KeyShares/KeySharesData/exceptions/operator.ts", "../../src/lib/KeyShares/KeySharesData/exceptions/bls.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesPayloadV2.ts", "../../src/lib/helpers/web3.helper.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesDataV3.ts", "../../src/lib/KeyShares/KeySharesData/OperatorDataV3.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesKeysV3.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesPayloadV3.ts", "../../src/lib/Threshold/Threshold.ts", "../../src/lib/EthereumKeyStore/EthereumKeyStore.ts"],
  "sourcesContent": ["import atob from 'atob';\nimport { encode } from 'js-base64';\nimport { KeyShares } from './KeyShares/KeyShares';\nimport Threshold, { IShares, ISharesKeyPairs } from './Threshold';\nimport EthereumKeyStore from './EthereumKeyStore/EthereumKeyStore';\nimport Encryption, { EncryptShare } from './Encryption/Encryption';\nimport { web3 } from './helpers/web3.helper';\n\n/**\n * SSVKeys class provides high-level methods to easily work with entire flow:\n *  - getting private key from keystore file using password\n *  - creating shares threshold\n *  - creating final shares\n *  - building final payload which is ready to be used in web3 transaction\n */\nexport class SSVKeys {\n  static SHARES_FORMAT_ABI = 'abi';\n  static VERSION = {\n    V2: 'v2',\n    V3: 'v3',\n  };\n\n  protected version: string;\n  protected web3Instances: any = {};\n  protected threshold: ISharesKeyPairs | undefined;\n\n  public keySharesInstance: KeyShares;\n\n  constructor(ver: string) {\n    if (!Object.values(SSVKeys.VERSION).includes(ver)) {\n      throw Error ('Version is not supported');\n    }\n\n    this.version = ver;\n    this.keySharesInstance = new KeyShares({ version: this.version });\n  }\n\n  get keyShares(): KeyShares {\n    return this.keySharesInstance;\n  }\n  /**\n   * Extract private key from keystore data using keystore password.\n   * Generally can be used in browsers when the keystore data has been provided by browser.\n   * @param data\n   * @param password\n   */\n  async getPrivateKeyFromKeystoreData(data: string, password: string): Promise<string> {\n    try {\n      const keyStore = new EthereumKeyStore(data);\n      return await keyStore.getPrivateKey(password).then((privateKey: string) => privateKey);\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Build threshold using private key for number of participants and failed participants.\n   * @param privateKey\n   * @param operators\n   */\n  async createThreshold(privateKey: string, operators: number[]): Promise<ISharesKeyPairs> {\n    try {\n      const threshold: Threshold = new Threshold();\n      this.threshold = await threshold.create(privateKey, operators);\n      return this.threshold;\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Encrypt operators shares using operators public keys.\n   * @param operatorsPublicKeys\n   * @param shares\n   * @param sharesFormat\n   */\n  async encryptShares(operatorsPublicKeys: string[], shares: IShares[], sharesFormat = ''): Promise<EncryptShare[]> {\n    try {\n      const decodedOperators = operatorsPublicKeys.map((operator: string) => String(encode(atob(operator))));\n      const encryptedShares = new Encryption(decodedOperators, shares).encrypt();\n      return encryptedShares.map((share: EncryptShare) => {\n        share.operatorPublicKey = encode(share.operatorPublicKey);\n        if (sharesFormat === SSVKeys.SHARES_FORMAT_ABI) {\n          share.operatorPublicKey = web3.eth.abi.encodeParameter('string', share.operatorPublicKey);\n          share.privateKey = web3.eth.abi.encodeParameter('string', share.privateKey);\n        }\n        return share;\n      });\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Build shares from private key, operator IDs and public keys\n   * @param privateKey\n   * @param operatorIds\n   * @param operatorPublicKeys\n   */\n  async buildShares(privateKey: string, operatorIds: number[], operatorPublicKeys: string[]): Promise<EncryptShare[]> {\n    const threshold = await this.createThreshold(privateKey, operatorIds);\n    return this.encryptShares(operatorPublicKeys, threshold.shares);\n  }\n\n  /**\n   * Getting threshold if it has been created before.\n   */\n  getThreshold()  {\n    return this.threshold;\n  }\n\n  /**\n   * Getting public key of validator\n   */\n  getValidatorPublicKey(): string {\n    return this.getThreshold()?.validatorPublicKey || '';\n  }\n\n  /**\n   * Build payload from encrypted shares, validator public key and operator IDs\n   * @param validatorPublicKey\n   * @param operatorsIds\n   * @param encryptedShares\n   * @param ssvAmount\n   */\n  buildPayload(validatorPublicKey: string, operatorsIds: number[], encryptedShares: EncryptShare[], ssvAmount: string | number): any {\n    this.keyShares.generateContractPayload({\n      validatorPublicKey,\n      operatorsIds,\n      encryptedShares,\n      ssvAmount\n    });\n\n    return this.keyShares.payload;\n  }\n\n  /**\n   * Build payload from keyshares file with operators and shares details inside.\n   * If ssv amount is not provided - it will be taken from keyshares file if exist there or set to 0.\n   * @param keyShares\n   * @param ssvAmount\n   */\n  buildPayloadFromKeyShares(keyShares: KeyShares, ssvAmount?: string | number): any {\n    const publicKeys = keyShares.data?.shares?.publicKeys || [];\n    const validatorPublicKey = keyShares.data?.publicKey;\n    const encryptedKeys = keyShares.data?.shares?.encryptedKeys || [];\n    const operatorPublicKeys = keyShares.data?.operatorPublicKeys || [];\n\n    if (publicKeys.length !== encryptedKeys.length\n      || publicKeys.length !== operatorPublicKeys.length\n      || encryptedKeys.length !== operatorPublicKeys.length\n      || !encryptedKeys.length\n      || !operatorPublicKeys.length\n      || !publicKeys.length\n    ) {\n      throw Error('Operator public keys and shares public/encrypted keys length does not match or have zero length.');\n    }\n    this.keyShares.generateContractPayload({\n      validatorPublicKey,\n      operatorsIds: keyShares.data?.operators?.map((item: any) => item.id),\n      encryptedShares: publicKeys.map((item: any, index: number) => ({\n        publicKey: item,\n        privateKey: encryptedKeys[index],\n      })),\n      ssvAmount: ssvAmount || keyShares.payload?.readable?.ssvAmount || 0,\n    });\n\n    return this.keyShares.payload;\n  }\n}\n", "import {\n  IsString,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  ValidateNested,\n  validateOrReject\n} from 'class-validator';\n\nimport { KeySharesDataV2 } from './KeySharesData/KeySharesDataV2';\nimport { KeySharesPayloadV2 } from './KeySharesData/KeySharesPayloadV2';\n\nimport { KeySharesDataV3 } from './KeySharesData/KeySharesDataV3';\nimport { KeySharesPayloadV3 } from './KeySharesData/KeySharesPayloadV3';\n\nexport type KeySharesData = KeySharesDataV3;\nexport type KeySharesPayload = KeySharesPayloadV3;\n\n/**\n * Key shares file data interface.\n */\nexport class KeyShares {\n  static VERSION_V2 = 'v2';\n  static VERSION_V3 = 'v3';\n\n  // Versions of deeper structures\n  private byVersion: any = {\n    'payload': {\n      [KeyShares.VERSION_V2]: KeySharesPayloadV2,\n      [KeyShares.VERSION_V3]: KeySharesPayloadV3,\n    },\n    'data': {\n      [KeyShares.VERSION_V2]: KeySharesDataV2,\n      [KeyShares.VERSION_V3]: KeySharesDataV3,\n    }\n  }\n\n  @IsString()\n  @IsDefined()\n  @IsNotEmpty()\n  public version: string;\n\n  @IsOptional()\n  @ValidateNested()\n  public data: KeySharesData;\n\n  @IsOptional()\n  @ValidateNested()\n  public payload: KeySharesPayload;\n\n  /**\n   * @param version\n   */\n  constructor({ version }: { version: string }) {\n    this.version = version;\n    this.data = this.getByVersion('data', version);\n    this.payload = this.getByVersion('payload', version);\n  }\n\n  /**\n   * Set final payload for web3 transaction and validate it.\n   * @param payload\n   */\n  generateContractPayload(data: any): void {\n    const payloadData = this.payload.build(data);\n    this.payload?.setData(payloadData);\n  }\n\n  /**\n   * Set new data and validate it.\n   * @param data\n   */\n  setData(data: any) {\n    this.useData(data);\n  }\n\n  /**\n   * Get entity by version.\n   * @param entity\n   * @param version\n   * @private\n   */\n  private getByVersion(entity: string, version: string): any {\n    if (!this.byVersion[entity]) {\n      throw Error(`\"${entity}\" is unknown entity`);\n    }\n    if (!this.byVersion[entity][version]) {\n      throw Error(`\"${entity}\" is not supported in version of key shares: ${version}`);\n    }\n    return new this.byVersion[entity][version]();\n  }\n\n  /**\n   * Get final data converted from raw data.\n   * @param data\n   * @param version\n   */\n  useData(data: any): void {\n    if (!data) {\n      return;\n    }\n    this.data.setData(data);\n    this.validate();\n  }\n\n  /**\n   * Validate everything\n   */\n  validate(): any {\n    // Validate data and payload\n    this.payload?.validate();\n    this.data?.validate();\n    validateOrReject(this)\n      .then()\n      .catch((err) => {\n        throw Error(err)\n      });\n  }\n\n  /**\n   * Initialise from JSON or object data.\n   */\n  fromJson(data: string | any): KeyShares {\n    // Parse json\n    if (typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n    this.setData(data.data);\n    return this;\n  }\n\n\n  /**\n   * Stringify key shares to be ready for saving in file.\n   */\n  toJson(): string {\n    return JSON.stringify({\n      version: this.version,\n      data: this.data || null,\n      payload: this.payload || null,\n      createdAt: new Date().toISOString()\n    }, null, '  ');\n  }\n}\n", "import _ from 'underscore';\nimport {\n  IsString,\n  Length,\n  ValidateNested, IsOptional\n} from 'class-validator';\nimport bls from '../../BLS';\nimport { IKeySharesData } from './IKeySharesData';\nimport { OperatorDataV2 } from './OperatorDataV2';\nimport { KeySharesKeysV2 } from './KeySharesKeysV2';\nimport {\n  DuplicatedOperatorIdError,\n  DuplicatedOperatorPublicKeyError,\n  OperatorsWithSharesCountsMismatchError\n} from './exceptions/operator';\nimport { BLSDeserializeError } from './exceptions/bls';\n\n\nexport class KeySharesDataV2 implements IKeySharesData {\n  @IsOptional()\n  @IsString()\n  @Length(98, 98)\n  public publicKey?: string | null = null;\n\n  @IsOptional()\n  @ValidateNested({ each: true })\n  public operators?: OperatorDataV2[] | null = null;\n\n  @IsOptional()\n  @ValidateNested()\n  public shares?: KeySharesKeysV2 | null = null;\n\n  setData(data: any) {\n    if (data.publicKey) {\n      this.publicKey = data.publicKey;\n    }\n    if (data.operators) {\n      this.operators = data.operators.map(\n        (operator: { id: any; publicKey: any; }) => {\n          const operatorData = new OperatorDataV2();\n          operatorData.setData(operator);\n          return operatorData;\n        }\n      );\n    }\n    if (data.shares) {\n      const sharesInstance = new KeySharesKeysV2();\n      if (_.isArray(data.shares)) {\n        sharesInstance.setData({\n          publicKeys: data.shares.map((share: { publicKey: string; }) => share.publicKey),\n          encryptedKeys: data.shares.map((share: { privateKey: string; }) => share.privateKey),\n        });\n      } else {\n        sharesInstance.setData(data.shares);\n      }\n      this.shares = sharesInstance;\n    }\n  }\n\n  /**\n   * Do all possible validations.\n   */\n  async validate(): Promise<any> {\n    this.validateDuplicates();\n    bls.init(bls.BLS12_381);\n    this.validateCounts();\n    this.shares?.validate();\n    this.validatePublicKey();\n    this.validateOperators();\n  }\n\n  /**\n   * Get the list of shares public keys.\n   */\n  get sharesPublicKeys(): string[] {\n    return this.shares?.publicKeys || [];\n  }\n\n  /**\n   * Get the list of encrypted shares.\n   */\n  get sharesEncryptedKeys(): string[] {\n    return this.shares?.encryptedKeys || [];\n  }\n\n  /**\n   * Get the list of operators IDs.\n   */\n  get operatorIds(): number[] {\n    if (!this.operators?.length) {\n      return [];\n    }\n    return this.operators.map(operator => parseInt(String(operator.id), 10));\n  }\n\n  /**\n   * Get the list of operators public keys.\n   */\n  get operatorPublicKeys(): string[] {\n    if (!this.operators?.length) {\n      return [];\n    }\n    return this.operators.map(operator => String(operator.publicKey));\n  }\n\n  /**\n   * Try to BLS deserialize validator public key.\n   */\n  validatePublicKey(): void {\n    if (!this.publicKey) {\n      return;\n    }\n    try {\n      bls.deserializeHexStrToPublicKey(this.publicKey.replace('0x', ''));\n    } catch (e) {\n      throw new BLSDeserializeError(\n        this.publicKey,\n        `Can not BLS deserialize validator public key`\n      );\n    }\n  }\n\n  /**\n   * Check that counts are consistent.\n   */\n  validateCounts(): void {\n    if (!this.sharesEncryptedKeys?.length || !this.sharesPublicKeys?.length) {\n      return;\n    }\n    if (this.operatorIds.length !== this.sharesEncryptedKeys.length\n      || this.operatorIds.length !== this.sharesPublicKeys.length\n      || this.operatorIds.length !== this.operatorPublicKeys.length) {\n      throw new OperatorsWithSharesCountsMismatchError(\n        this.operators || [],\n        this.shares,\n        'Length of operators and shares should be equal.',\n      );\n    }\n  }\n\n  /**\n   * Validate all operators\n   */\n  validateOperators(): void {\n    for (const operator of this.operators || []) {\n      operator.validate();\n    }\n  }\n\n  /**\n   * Do not allow to use duplicated operator IDs and public keys.\n   */\n  validateDuplicates() {\n    const operatorIds: any = {},\n      operatorPublicKeys: any = {};\n    for (const operator of this.operators || []) {\n      if (operatorIds[String(operator.id)] === true) {\n        throw new DuplicatedOperatorIdError(\n          operator,\n          `Operator ID already exists`\n        );\n      }\n      operatorIds[String(operator.id)] = true;\n\n      if (operatorPublicKeys[String(operator.publicKey)] === true) {\n        throw new DuplicatedOperatorPublicKeyError(\n          operator,\n          `Operator public key already exists`\n        );\n      }\n      operatorPublicKeys[String(operator.publicKey)] = true;\n    }\n  }\n}\n", "let index: any;\n\ntry {\n  window.crypto;\n  index = require('bls-eth-wasm/browser');\n} catch {\n  index = require('bls-eth-wasm');\n}\n\nexport default index;\n", "import { IsDefined, IsInt, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { IOperatorData } from './IOperatorData';\nimport { operatorValidator } from '../../../commands/actions/validators/operator';\n\nexport class OperatorDataV2 implements IOperatorData {\n  @IsNotEmpty()\n  @IsDefined()\n  @IsInt()\n  public id: number | undefined;\n\n  @IsNotEmpty()\n  @IsDefined()\n  @IsString()\n  @MinLength(98)\n  public publicKey: string | undefined;\n\n  setData(data: any): any {\n    if (data.id) {\n      this.id = data.id;\n    }\n    if (data.publicKey) {\n      this.publicKey = data.publicKey;\n    }\n  }\n\n  /**\n   * Validate operator ID and public key\n   */\n  validate(): void {\n    if (!Number.isInteger(this.id)) {\n      throw Error('Operator ID should be integer');\n    }\n    const result = operatorValidator(this.publicKey || '');\n    if (result !== true) {\n      throw Error(String(result));\n    }\n  }\n}\n", "import { decode } from 'js-base64';\nimport JSEncrypt from '../../../lib/JSEncrypt';\nimport { InvalidOperatorKeyException } from '../../../lib/Encryption/Encryption';\n\nexport const operatorValidator = (operator: string): string | boolean => {\n  try {\n    const errorMessage = 'Invalid operator key format, make sure the operator exists in the network';\n    const decodedOperator = decode(operator);\n    if (!decodedOperator.startsWith('-----BEGIN RSA PUBLIC KEY-----')) {\n      throw Error(errorMessage);\n    }\n    const encrypt = new JSEncrypt({});\n    try {\n      encrypt.setPublicKey(decodedOperator);\n    } catch (error) {\n      throw new InvalidOperatorKeyException(\n        {\n          rsa: decodedOperator,\n          base64: operator,\n        },\n        errorMessage,\n      );\n    }\n    return true;\n  } catch (e) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const { message } = e;\n    return message;\n  }\n}\n", "let index: any;\n\ntry {\n  window.crypto;\n  index = require('jsencrypt').JSEncrypt;\n} catch {\n  index = require('node-jsencrypt');\n}\n\nexport default index;\n", "import {decode, encode} from 'js-base64';\nimport JSEncrypt from '../JSEncrypt';\nimport { IShares } from '../Threshold';\n\nexport class InvalidOperatorKeyException extends Error {\n  public operator: any;\n\n  constructor(operator: { rsa: string, base64: string }, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\nexport interface EncryptShare {\n    operatorPublicKey: string,\n    privateKey: string,\n    publicKey: string\n}\n\nexport default class Encryption {\n    private readonly operators: string[];\n    private readonly shares: IShares[];\n\n  RAW_OPERATOR_PUBLIC_KEY_SIGNATURE = RegExp(/------BEGIN RSA PUBLIC KEY-----/, 'gmi');\n\n  constructor(operators: string[], shares: IShares[]) {\n    this.operators = operators.map((publicKey: string) => {\n      if (this.RAW_OPERATOR_PUBLIC_KEY_SIGNATURE.test(publicKey)) {\n        return publicKey;\n      }\n      return decode(publicKey);\n    });\n    this.shares = shares;\n  }\n\n    encrypt(): EncryptShare[] {\n        const encryptedShares: EncryptShare[] = [];\n        Object.keys(this.operators).forEach((operator: any) => {\n            const encrypt = new JSEncrypt({});\n            try {\n              encrypt.setPublicKey(this.operators[operator]);\n            } catch (error) {\n              throw new InvalidOperatorKeyException(\n                {\n                  rsa: this.operators[operator],\n                  base64: encode(this.operators[operator]),\n                },\n                `Operator is not valid RSA Public Key: ${error}`\n              );\n            }\n            const encrypted = encrypt.encrypt(this.shares[operator].privateKey);\n            const encryptedShare: EncryptShare = {\n                operatorPublicKey: this.operators[operator],\n                privateKey: String(encrypted),\n                publicKey: this.shares[operator].publicKey,\n            };\n            encryptedShares.push(encryptedShare);\n            return encryptedShare;\n        });\n        return encryptedShares;\n    }\n}\n", "import Web3 from 'web3';\nimport _ from 'underscore';\nimport { decode } from 'js-base64';\nimport { IsArray, MinLength } from 'class-validator';\nimport bls from '../../BLS';\nimport { IKeySharesKeys } from './IKeySharesKeys';\n\nconst web3 = new Web3();\n\nexport class KeySharesKeysV2 implements IKeySharesKeys {\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  publicKeys: string[] | undefined;\n\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  encryptedKeys: string[] | undefined;\n\n  /**\n   * Set public and encrypted keys from data.\n   * @param data\n   */\n  setData(data: any) {\n    if (data.publicKeys) {\n      this.validateArrayOfStrings(data.publicKeys);\n      this.publicKeys = data.publicKeys;\n    }\n    if (data.encryptedKeys) {\n      this.validateArrayOfStrings(data.encryptedKeys);\n      this.encryptedKeys = data.encryptedKeys;\n    }\n  }\n\n  /**\n   * Validation of all data.\n   */\n  validate(): void {\n    this.validatePublicKeys();\n    this.validateEncryptedKeys();\n  }\n\n  /**\n   * If shares encrypted keys are ABI encoded - try to decode them.\n   */\n  validateEncryptedKeys(): void {\n    let encryptedKeyWithError = '';\n    try {\n      (this.encryptedKeys || []).map(encryptedKey => {\n        let key: any = encryptedKey;\n        // If the key is ABI encoded - decode it.\n        if (key.startsWith('0x')) {\n          encryptedKeyWithError = key;\n          key = web3.eth.abi.decodeParameter('string', encryptedKey);\n        }\n        // ABI decoded key then should be a valid base 64 string\n        decode(String(key));\n      });\n    } catch (e) {\n      throw Error(`Can not ABI decode shares encrypted key: ${encryptedKeyWithError}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * Try to BLS deserialize shares public keys.\n   */\n  validatePublicKeys(): void {\n    let publicKeyWithError = '';\n    try {\n      for (const publicKey of this.publicKeys || []) {\n        publicKeyWithError = publicKey;\n        bls.deserializeHexStrToPublicKey(publicKey.replace('0x', ''));\n      }\n    } catch (e) {\n      throw Error(`Can not BLS deserialize shares public key: ${publicKeyWithError}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * Validate that the data is the array of strings.\n   * @param data\n   */\n  validateArrayOfStrings(data: any) {\n    if (!_.isArray(data)) {\n      throw Error('Keys should be an array of strings');\n    }\n    const isArrayOfStrings = data.every((key: any) => typeof key === 'string');\n    if (!isArrayOfStrings) {\n      throw Error('Keys should be an array of strings');\n    }\n  }\n}\n", "import { IOperatorData } from '../IOperatorData';\nimport { IKeySharesKeys } from '../IKeySharesKeys';\n\nexport class DuplicatedOperatorIdError extends Error {\n  public operator: IOperatorData;\n\n  constructor(operator: IOperatorData, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\nexport class DuplicatedOperatorPublicKeyError extends Error {\n  public operator: IOperatorData;\n\n  constructor(operator: IOperatorData, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\nexport class OperatorsWithSharesCountsMismatchError extends Error {\n  public operators: IOperatorData[];\n  public shares: IKeySharesKeys  | null | undefined;\n\n  constructor(operators: IOperatorData[], shares: IKeySharesKeys  | null | undefined, message: string) {\n    super(message);\n    this.operators = operators;\n    this.shares = shares;\n  }\n}\n", "export class BLSDeserializeError extends Error {\n  public publicKey: string;\n\n  constructor(publicKey: string, message: string) {\n    super(message);\n    this.publicKey = publicKey;\n  }\n}\n", "import _ from 'underscore';\nimport { abiEncode } from '../../helpers/web3.helper';\n\nimport { IsString, IsObject, IsOptional } from 'class-validator';\nimport { IKeySharesPayload } from './IKeySharesPayload';\nimport { EncryptShare } from '../../Encryption/Encryption';\n\n/**\n * Key Shares Payload v2.\n */\nexport class KeySharesPayloadV2 implements IKeySharesPayload {\n  static PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY = 0;\n  static PAYLOAD_INDEX_OPERATOR_IDS = 1;\n  static PAYLOAD_INDEX_SHARE_PUBLIC_KEYS = 2;\n  static PAYLOAD_INDEX_SHARE_PRIVATE_KEYS = 3;\n  static PAYLOAD_INDEX_SSV_AMOUNT = 4;\n\n  @IsOptional()\n  @IsObject()\n  public readable?: any = null;\n\n  @IsOptional()\n  @IsString()\n  public raw?: string | null = null;\n\n  build(data: any): any {\n    return [\n      data.validatorPublicKey,\n      data.operatorsIds.join(','),\n      data.encryptedShares.map((share: EncryptShare) => share.publicKey),\n      abiEncode(data.encryptedShares, 'privateKey'),\n      data.ssvAmount,\n    ];\n  }\n\n  /**\n   * Setting data in array or object format or cleaning it up.\n   * @param data\n   */\n  setData(data: any): any {\n    // Cleanup\n    if (!data === null) {\n      this.raw = null;\n      this.readable = null;\n      return;\n    }\n\n    // Payload array\n    if (_.isArray(data)) {\n      this.raw = this.toRaw(data);\n      this.readable = this.toReadable(data);\n      return;\n    }\n\n    // Payload object (typically from key shares file)\n    if (_.isObject(data)) {\n      if (data.readable) {\n        this.readable = data.readable;\n      }\n      if (data.raw) {\n        this.raw = data.raw;\n      }\n    }\n  }\n\n  /**\n   * Building raw payload for web3.\n   * @param payload\n   */\n  toRaw(payload: any[]): any {\n    return payload.join(',');\n  }\n\n  /**\n   * Building readable payload structure.\n   * @param payload\n   */\n  toReadable(payload: any[]): any {\n    return {\n      validatorPublicKey: payload[KeySharesPayloadV2.PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY],\n      operatorIds: payload[KeySharesPayloadV2.PAYLOAD_INDEX_OPERATOR_IDS],\n      sharePublicKeys: payload[KeySharesPayloadV2.PAYLOAD_INDEX_SHARE_PUBLIC_KEYS],\n      sharePrivateKey: payload[KeySharesPayloadV2.PAYLOAD_INDEX_SHARE_PRIVATE_KEYS],\n      ssvAmount: payload[KeySharesPayloadV2.PAYLOAD_INDEX_SSV_AMOUNT],\n    };\n  }\n\n  async validate(): Promise<any> {\n    // Find out how final payload can be validated.\n  }\n}\n", "import Web3 from 'web3';\n\nexport const web3 = new Web3();\n\n/**\n * Encode with Web3 eth abi method any fields of shares array required for transaction.\n * @param encryptedShares\n * @param field\n */\nexport const abiEncode = (encryptedShares: any[], field?: string): string[] => {\n  return encryptedShares.map(share => {\n    const value = field ? Object(share)[field] : share;\n    if (String(value).startsWith('0x')) {\n      return value;\n    }\n    return web3.eth.abi.encodeParameter('string', value);\n  });\n}\n", "import _ from 'underscore';\nimport {\n  IsString,\n  Length,\n  ValidateNested, IsOptional\n} from 'class-validator';\nimport bls from '../../BLS';\nimport { IKeySharesData } from './IKeySharesData';\nimport { OperatorDataV3 } from './OperatorDataV3';\nimport { KeySharesKeysV3 } from './KeySharesKeysV3';\nimport {\n  DuplicatedOperatorIdError,\n  DuplicatedOperatorPublicKeyError,\n  OperatorsWithSharesCountsMismatchError\n} from './exceptions/operator';\nimport { BLSDeserializeError } from './exceptions/bls';\n\n\nexport class KeySharesDataV3 implements IKeySharesData {\n  @IsOptional()\n  @IsString()\n  @Length(98, 98)\n  public publicKey?: string | null = null;\n\n  @IsOptional()\n  @ValidateNested({ each: true })\n  public operators?: OperatorDataV3[] | null = null;\n\n  @IsOptional()\n  @ValidateNested()\n  public shares?: KeySharesKeysV3 | null = null;\n\n  setData(data: any) {\n    if (data.publicKey) {\n      this.publicKey = data.publicKey;\n    }\n    if (data.operators) {\n      this.operators = data.operators.map(\n        (operator: { id: any; publicKey: any; }) => {\n          const operatorData = new OperatorDataV3();\n          operatorData.setData(operator);\n          return operatorData;\n        }\n      );\n    }\n    if (data.shares) {\n      const sharesInstance = new KeySharesKeysV3();\n      if (_.isArray(data.shares)) {\n        sharesInstance.setData({\n          publicKeys: data.shares.map((share: { publicKey: string; }) => share.publicKey),\n          encryptedKeys: data.shares.map((share: { privateKey: string; }) => share.privateKey),\n        });\n      } else {\n        sharesInstance.setData(data.shares);\n      }\n      this.shares = sharesInstance;\n    }\n  }\n\n  /**\n   * Do all possible validations.\n   */\n  validate(): void {\n    this.validateDuplicates();\n    bls.init(bls.BLS12_381);\n    this.validateCounts();\n    this.shares?.validate();\n    this.validatePublicKey();\n    this.validateOperators();\n  }\n\n  /**\n   * Get the list of shares public keys.\n   */\n  get sharesPublicKeys(): string[] {\n    return this.shares?.publicKeys || [];\n  }\n\n  /**\n   * Get the list of encrypted shares.\n   */\n  get sharesEncryptedKeys(): string[] {\n    return this.shares?.encryptedKeys || [];\n  }\n\n  /**\n   * Get the list of operators IDs.\n   */\n  get operatorIds(): number[] {\n    if (!this.operators?.length) {\n      return [];\n    }\n    return this.operators.map(operator => parseInt(String(operator.id), 10));\n  }\n\n  /**\n   * Get the list of operators public keys.\n   */\n  get operatorPublicKeys(): string[] {\n    if (!this.operators?.length) {\n      return [];\n    }\n    return this.operators.map(operator => String(operator.publicKey));\n  }\n\n  /**\n   * Try to BLS deserialize validator public key.\n   */\n  validatePublicKey(): void {\n    if (!this.publicKey) {\n      return;\n    }\n    try {\n      bls.deserializeHexStrToPublicKey(this.publicKey.replace('0x', ''));\n    } catch (e) {\n      throw new BLSDeserializeError(\n        this.publicKey,\n        `Can not BLS deserialize validator public key`\n      );\n    }\n  }\n\n  /**\n   * Check that counts are consistent.\n   */\n  validateCounts(): void {\n    if (!this.sharesEncryptedKeys?.length || !this.sharesPublicKeys?.length) {\n      return;\n    }\n    if (this.operatorIds.length !== this.sharesEncryptedKeys.length\n      || this.operatorIds.length !== this.sharesPublicKeys.length\n      || this.operatorIds.length !== this.operatorPublicKeys.length) {\n      throw new OperatorsWithSharesCountsMismatchError(\n        this.operators || [],\n        this.shares,\n        'Length of operators and shares should be equal.',\n      );\n    }\n  }\n\n  /**\n   * Validate all operators\n   */\n  validateOperators(): void {\n    for (const operator of this.operators || []) {\n      operator.validate();\n    }\n  }\n\n  /**\n   * Do not allow to use duplicated operator IDs and public keys.\n   */\n  validateDuplicates(): void {\n    const operatorIds: any = {},\n      operatorPublicKeys: any = {};\n    for (const operator of this.operators || []) {\n      if (operatorIds[String(operator.id)] === true) {\n        throw new DuplicatedOperatorIdError(\n          operator,\n          `Operator ID already exists`\n        );\n      }\n      operatorIds[String(operator.id)] = true;\n\n      if (operatorPublicKeys[String(operator.publicKey)] === true) {\n        throw new DuplicatedOperatorPublicKeyError(\n          operator,\n          `Operator public key already exists`\n        );\n      }\n      operatorPublicKeys[String(operator.publicKey)] = true;\n    }\n  }\n}\n", "import { IsDefined, IsInt, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { IOperatorData } from './IOperatorData';\nimport { operatorValidator } from '../../../commands/actions/validators/operator';\n\nexport class OperatorDataV3 implements IOperatorData {\n  @IsNotEmpty()\n  @IsDefined()\n  @IsInt()\n  public id: number | undefined;\n\n  @IsNotEmpty()\n  @IsDefined()\n  @IsString()\n  @MinLength(98)\n  public publicKey: string | undefined;\n\n  setData(data: any): any {\n    if (data.id) {\n      this.id = data.id;\n    }\n    if (data.publicKey) {\n      this.publicKey = data.publicKey;\n    }\n  }\n\n  /**\n   * Validate operator ID and public key\n   */\n  validate(): void {\n    if (!Number.isInteger(this.id)) {\n      throw Error('Operator ID should be integer');\n    }\n    const result = operatorValidator(this.publicKey || '');\n    if (result !== true) {\n      throw Error(String(result));\n    }\n  }\n}\n", "import Web3 from 'web3';\nimport _ from 'underscore';\nimport { decode } from 'js-base64';\nimport { IsArray, MinLength } from 'class-validator';\nimport bls from '../../BLS';\nimport { IKeySharesKeys } from './IKeySharesKeys';\n\nconst web3 = new Web3();\n\nexport class KeySharesKeysV3 implements IKeySharesKeys {\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  publicKeys: string[] | undefined;\n\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  encryptedKeys: string[] | undefined;\n\n  /**\n   * Set public and encrypted keys from data.\n   * @param data\n   */\n  setData(data: any) {\n    if (data.publicKeys) {\n      this.validateArrayOfStrings(data.publicKeys);\n      this.publicKeys = data.publicKeys;\n    }\n    if (data.encryptedKeys) {\n      this.validateArrayOfStrings(data.encryptedKeys);\n      this.encryptedKeys = data.encryptedKeys;\n    }\n  }\n\n  /**\n   * Validation of all data.\n   */\n  validate(): void {\n    this.validatePublicKeys();\n    this.validateEncryptedKeys();\n  }\n\n  /**\n   * If shares encrypted keys are ABI encoded - try to decode them.\n   */\n  validateEncryptedKeys(): void {\n    let encryptedKeyWithError = '';\n    try {\n      (this.encryptedKeys || []).map(encryptedKey => {\n        let key: any = encryptedKey;\n        // If the key is ABI encoded - decode it.\n        if (key.startsWith('0x')) {\n          encryptedKeyWithError = key;\n          key = web3.eth.abi.decodeParameter('string', encryptedKey);\n        }\n        // ABI decoded key then should be a valid base 64 string\n        decode(String(key));\n      });\n    } catch (e) {\n      throw Error(`Can not ABI decode shares encrypted key: ${encryptedKeyWithError}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * Try to BLS deserialize shares public keys.\n   */\n  validatePublicKeys(): void {\n    let publicKeyWithError = '';\n    try {\n      for (const publicKey of this.publicKeys || []) {\n        publicKeyWithError = publicKey;\n        bls.deserializeHexStrToPublicKey(publicKey.replace('0x', ''));\n      }\n    } catch (e) {\n      throw Error(`Can not BLS deserialize shares public key: ${publicKeyWithError}. Error: ${String(e)}`);\n    }\n  }\n\n  /**\n   * Validate that the data is the array of strings.\n   * @param data\n   */\n  validateArrayOfStrings(data: any) {\n    if (!_.isArray(data)) {\n      throw Error('Keys should be an array of strings');\n    }\n    const isArrayOfStrings = data.every((key: any) => typeof key === 'string');\n    if (!isArrayOfStrings) {\n      throw Error('Keys should be an array of strings');\n    }\n  }\n}\n", "import _ from 'underscore';\nimport * as ethers from 'ethers';\n\nimport { IsString, IsObject, IsOptional } from 'class-validator';\nimport { IKeySharesPayload } from './IKeySharesPayload';\nimport { EncryptShare } from '../../Encryption/Encryption';\n\n/**\n * Key Shares Payload v2.\n */\nexport class KeySharesPayloadV3 implements IKeySharesPayload {\n  static PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY = 0;\n  static PAYLOAD_INDEX_OPERATOR_IDS = 1;\n  static PAYLOAD_INDEX_SHARES_KEYS = 2;\n  static PAYLOAD_INDEX_SSV_AMOUNT = 3;\n\n  @IsOptional()\n  @IsObject()\n  public readable?: any = null;\n\n  @IsOptional()\n  @IsString()\n  public raw?: string | null = null;\n\n  private decodeRSAShares(arr: string[]) {\n    return arr.map(item => ('0x' + Buffer.from(item, 'base64').toString('hex')));\n  }\n\n  private sharesToBytes(publicKeys: string[], privateKeys: string[]): string {\n    const encryptedShares = this.decodeRSAShares(privateKeys);\n    const arrayPublicKeys = new Uint8Array(publicKeys.map(pk => [...ethers.utils.arrayify(pk)]).flat());\n    const arrayEncryptedShares = new Uint8Array(encryptedShares.map(sh => [...ethers.utils.arrayify(sh)]).flat());\n\n    // public keys hex encoded\n    const pkHex = ethers.utils.hexlify(arrayPublicKeys);\n    // length of the public keys (hex), hex encoded\n    const pkHexLength = String(pkHex.length.toString(16)).padStart(4, '0');\n\n    // join arrays\n    const pkPsBytes = Buffer.concat([arrayPublicKeys, arrayEncryptedShares]);\n\n    // add length of the public keys at the beginning\n    // this is the variable that is sent to the contract as bytes, prefixed with 0x\n    return `0x${pkHexLength}${pkPsBytes.toString('hex')}`;\n  }\n\n  build(data: any): any {\n    return [\n      data.validatorPublicKey,\n      data.operatorsIds.join(','),\n      this.sharesToBytes(data.encryptedShares.map((share: EncryptShare) => share.publicKey), data.encryptedShares.map((share: EncryptShare) => share.privateKey)),\n      data.ssvAmount,\n    ];\n  }\n\n  /**\n   * Setting data in array or object format or cleaning it up.\n   * @param data\n   */\n  setData(data: any): any {\n    // Cleanup\n    if (!data === null) {\n      this.raw = null;\n      this.readable = null;\n      return;\n    }\n\n    // Payload array\n    if (_.isArray(data)) {\n      this.raw = this.toRaw(data);\n      this.readable = this.toReadable(data);\n      return;\n    }\n\n    // Payload object (typically from key shares file)\n    if (_.isObject(data)) {\n      if (data.readable) {\n        this.readable = data.readable;\n      }\n      if (data.raw) {\n        this.raw = data.raw;\n      }\n    }\n  }\n\n  /**\n   * Building raw payload for web3.\n   * @param payload\n   */\n  toRaw(payload: any[]): any {\n    return payload.join(',');\n  }\n\n  /**\n   * Building readable payload structure.\n   * @param payload\n   */\n  toReadable(payload: any[]): any {\n    return {\n      validatorPublicKey: payload[KeySharesPayloadV3.PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY],\n      operatorIds: payload[KeySharesPayloadV3.PAYLOAD_INDEX_OPERATOR_IDS],\n      shares: payload[KeySharesPayloadV3.PAYLOAD_INDEX_SHARES_KEYS],\n      ssvAmount: payload[KeySharesPayloadV3.PAYLOAD_INDEX_SSV_AMOUNT],\n    };\n  }\n\n  validate(): any {\n    // Find out how final payload can be validated.\n  }\n}\n", "import { SecretKeyType } from 'bls-eth-wasm';\nimport bls from '../BLS';\n\nexport interface IShares {\n    privateKey: string,\n    publicKey: string,\n    id?: any\n}\n\nexport interface ISharesKeyPairs {\n    validatorPrivateKey: string,\n    validatorPublicKey: string,\n    shares: IShares[]\n}\n\nexport class ThresholdInvalidOperatorsLengthError extends Error {\n  public operators: number[];\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(operators: number[], message: string) {\n    super(message);\n    this.operators = operators;\n  }\n}\n\nexport class ThresholdInvalidOperatorIdError extends Error {\n  public operator: any;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(operator: any, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\n/**\n * Building threshold for list of operator IDs\n */\nclass Threshold {\n    protected validatorPublicKey: any;\n    protected validatorPrivateKey: any;\n    protected shares: Array<any> = [];\n\n    static get DEFAULT_THRESHOLD_NUMBER(): number {\n      return 3;\n    }\n\n    /**\n     * Receives list of operators IDs.\n     *  len(operator IDs) := 3 * F + 1\n     *\n     * If F calculated from this formula is not integer number - it will raise exception.\n     * Generate keys and return promise\n     */\n    async create(privateKey: string, operators: number[]): Promise<ISharesKeyPairs> {\n        // Validation\n        operators.map(operator => {\n          if (!Number.isInteger(operator)) {\n            throw new ThresholdInvalidOperatorIdError(\n              operator,\n              `Operator must be integer. Got: ${String(operator)}`\n            );\n          }\n        });\n\n        const F = (operators.length - 1) / 3;\n        if (!Number.isInteger(F)) {\n          throw new ThresholdInvalidOperatorsLengthError(\n            operators,\n            'Invalid operators length. It should satisfy conditions: \u2016 Operators \u2016 := 3 * F + 1 ; F \u2208 \u2115'\n          );\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n                bls.init(bls.BLS12_381)\n                    .then(() => {\n                        const msk = [];\n                        const mpk = [];\n\n                        // Master key Polynomial\n                        this.validatorPrivateKey = bls.deserializeHexStrToSecretKey(privateKey);\n                        this.validatorPublicKey = this.validatorPrivateKey.getPublicKey();\n\n                        msk.push(this.validatorPrivateKey);\n                        mpk.push(this.validatorPublicKey);\n\n                        // Construct poly\n                        for (let i = 1; i < operators.length - F; i += 1) {\n                            const sk: SecretKeyType = new bls.SecretKey();\n                            sk.setByCSPRNG();\n                            msk.push(sk);\n                            const pk = sk.getPublicKey();\n                            mpk.push(pk);\n                        }\n\n                        // Evaluate shares - starting from 1 because 0 is master key\n                        for (const operatorId of operators) {\n                            const id = new bls.Id();\n                            id.setInt(operatorId);\n                            const shareSecretKey = new bls.SecretKey();\n                            shareSecretKey.share(msk, id);\n\n                            const sharePublicKey = new bls.PublicKey();\n                            sharePublicKey.share(mpk, id);\n\n                            this.shares.push({\n                                privateKey: `0x${shareSecretKey.serializeToHexStr()}`,\n                                publicKey: `0x${sharePublicKey.serializeToHexStr()}`,\n                                id,\n                            });\n                        }\n\n                        const response: ISharesKeyPairs = {\n                            validatorPrivateKey: `0x${this.validatorPrivateKey.serializeToHexStr()}`,\n                            validatorPublicKey: `0x${this.validatorPublicKey.serializeToHexStr()}`,\n                            shares: this.shares,\n                        };\n                        resolve(response);\n                    });\n            } catch (error: any) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Threshold;\n", "import crypto from 'crypto';\nimport { syncScrypt } from 'scrypt-js';\nimport Wallet from 'ethereumjs-wallet';\nimport { keccak256, sha256 } from 'ethereumjs-util';\n\ninterface V4Keystore {\n  crypto: {\n    kdf: {\n      function: string,\n      params: {\n        dklen: number,\n        n: number,\n        r: number,\n        p: number,\n        salt: string\n      },\n      message: string\n    },\n    checksum: {\n      function: string,\n      params: any,\n      message: string\n    },\n    cipher: {\n      function: string,\n      params: {\n        iv: string\n      },\n      message: string\n    }\n  },\n  description: string,\n  pubkey: string,\n  path: string,\n  uuid: string\n  version: number\n}\n\n/**\n * Decrypt private key from key store data\n * Supports key store versions: v1, v3, v4\n *\n * Example of usage (Node env):\n *\n *  const keyStoreFilePath = path.join(process.cwd(), 'validator_keys', 'keystore.json');\n *  const keyStoreString: string = fs.readFileSync(keyStoreFilePath).toString();\n *  const keyStoreData = JSON.parse(keyStoreString);\n *  const keyStore = new EthereumKeyStore(keyStoreData);\n *  const password = 'testtest';\n *  console.log('Private Key:', await keyStore.getPrivateKey(password));\n */\nclass EthereumKeyStore {\n  private readonly keyStoreData: any;\n  private privateKey = '';\n  private wallet: Wallet | undefined;\n\n  /**\n   * Receive key store data from string or parsed JSON\n   * @param keyStoreData\n   */\n  constructor(keyStoreData: any) {\n    if (!keyStoreData) {\n      throw new Error('Key store data should be JSON or string');\n    }\n    if (typeof keyStoreData === 'string') {\n      this.keyStoreData = JSON.parse(keyStoreData);\n    } else {\n      this.keyStoreData = keyStoreData;\n    }\n    if (!this.keyStoreData.version) {\n      throw new Error('Invalid keystore file');\n    }\n  }\n\n  getPublicKey(): string {\n    if (this.keyStoreData) {\n      switch (this.keyStoreData.version ?? this.keyStoreData.Version) {\n        case 1:\n          return this.keyStoreData.Address;\n        case 3:\n          return this.keyStoreData.id;\n        case 4:\n          return this.keyStoreData.pubkey;\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Decrypt private key using user password\n   * @param password\n   */\n  async getPrivateKey(password = ''): Promise<string> {\n    // In case private key exist we return it\n    if (this.privateKey) return this.privateKey;\n    switch (this.keyStoreData.version) {\n      case 1:\n        this.wallet = await Wallet.fromV1(this.keyStoreData, password);\n        break;\n      case 3:\n        this.wallet = await Wallet.fromV3(this.keyStoreData, password, true);\n        break;\n      case 4:\n        this.wallet = await this.fromV4(this.keyStoreData, password);\n        break;\n    }\n    if (this.wallet) {\n      this.privateKey = this.wallet.getPrivateKey().toString('hex');\n      if (!this.privateKey) {\n        throw new Error('Invalid password');\n      }\n    }\n    return this.privateKey;\n  }\n\n  /**\n   * Import a wallet (Version 4 of the Ethereum wallet format).\n   *\n   * @param input A JSON serialized string, or an object representing V3 Keystore.\n   * @param password The keystore password.\n   */\n  public async fromV4(\n    input: string | V4Keystore,\n    password: string,\n  ): Promise<Wallet> {\n    const json: V4Keystore = typeof input === 'object' ? input : JSON.parse(input);\n\n    if (json.version !== 4) {\n      throw new Error('Not a V4 wallet');\n    }\n\n    let derivedKey: Uint8Array;\n    let kdfParams: any;\n    if (json.crypto.kdf.function === 'scrypt') {\n      kdfParams = json.crypto.kdf.params;\n      derivedKey = syncScrypt(\n        Buffer.from(password),\n        Buffer.from(kdfParams.salt, 'hex'),\n        kdfParams.n,\n        kdfParams.r,\n        kdfParams.p,\n        kdfParams.dklen,\n      );\n    } else if (json.crypto.kdf.function === 'pbkdf2') {\n      kdfParams = json.crypto.kdf.params;\n\n      if (kdfParams.prf !== 'hmac-sha256') {\n        throw new Error('Unsupported parameters to PBKDF2');\n      }\n\n      derivedKey = crypto.pbkdf2Sync(\n        Buffer.from(password),\n        Buffer.from(kdfParams.salt, 'hex'),\n        kdfParams.c,\n        kdfParams.dklen,\n        'sha256',\n      );\n    } else {\n      throw new Error('Unsupported key derivation scheme');\n    }\n\n    const ciphertext = Buffer.from(json.crypto.cipher.message, 'hex');\n    const checksumBuffer = Buffer.concat([Buffer.from(derivedKey.slice(16, 32)), ciphertext]);\n    const hashFunctions: Record<string, any> = {\n      keccak256,\n      sha256,\n    };\n    const hashFunction: any = hashFunctions[json.crypto.checksum.function];\n    const mac: Buffer = hashFunction(checksumBuffer);\n    if (mac.toString('hex') !== json.crypto.checksum.message) {\n      throw new Error('Invalid password');\n    }\n\n    const decipher = crypto.createDecipheriv(\n      json.crypto.cipher.function,\n      derivedKey.slice(0, 16),\n      Buffer.from(json.crypto.cipher.params.iv, 'hex'),\n    );\n    const seed: Buffer = this.runCipherBuffer(decipher, ciphertext);\n    return new Wallet(seed);\n  }\n\n  /**\n   * @param cipher\n   * @param data\n   */\n  protected runCipherBuffer(cipher: crypto.Cipher | crypto.Decipher, data: Buffer): Buffer {\n    return Buffer.concat([cipher.update(data), cipher.final()]);\n  }\n\n  /**\n   * Convert byte array to string\n   * @param byteArray\n   */\n  static toHexString(byteArray: Uint8Array): string {\n    return Array.from(byteArray, (byte: number) => {\n      // eslint-disable-next-line no-bitwise\n      return (`0${(byte & 0xFF).toString(16)}`).slice(-2);\n    }).join('');\n  }\n}\n\nexport default EthereumKeyStore;\n"],
  "mappings": "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",
  "names": ["import_atob", "import_js_base64", "import_class_validator", "import_underscore", "import_class_validator", "index", "e", "BLS_default", "import_class_validator", "import_js_base64", "index", "e", "JSEncrypt_default", "import_js_base64", "InvalidOperatorKeyException", "operator", "message", "Encryption", "operators", "shares", "publicKey", "encryptedShares", "encrypt", "JSEncrypt_default", "error", "encrypted", "encryptedShare", "operatorValidator", "operator", "errorMessage", "decodedOperator", "encrypt", "JSEncrypt_default", "error", "InvalidOperatorKeyException", "e", "message", "OperatorDataV2", "data", "result", "operatorValidator", "__decorateClass", "import_web3", "import_underscore", "import_js_base64", "import_class_validator", "web3", "Web3", "KeySharesKeysV2", "data", "encryptedKeyWithError", "encryptedKey", "key", "publicKeyWithError", "publicKey", "BLS_default", "_", "__decorateClass", "DuplicatedOperatorIdError", "operator", "message", "DuplicatedOperatorPublicKeyError", "OperatorsWithSharesCountsMismatchError", "operators", "shares", "BLSDeserializeError", "publicKey", "message", "KeySharesDataV2", "data", "operator", "operatorData", "OperatorDataV2", "sharesInstance", "KeySharesKeysV2", "_", "share", "__async", "_a", "BLS_default", "e", "BLSDeserializeError", "_b", "OperatorsWithSharesCountsMismatchError", "operatorIds", "operatorPublicKeys", "DuplicatedOperatorIdError", "DuplicatedOperatorPublicKeyError", "__decorateClass", "import_underscore", "import_web3", "web3", "Web3", "abiEncode", "encryptedShares", "field", "share", "value", "import_class_validator", "_KeySharesPayloadV2", "data", "share", "abiEncode", "_", "payload", "__async", "KeySharesPayloadV2", "__decorateClass", "import_underscore", "import_class_validator", "import_class_validator", "OperatorDataV3", "data", "result", "operatorValidator", "__decorateClass", "import_web3", "import_underscore", "import_js_base64", "import_class_validator", "web3", "Web3", "KeySharesKeysV3", "data", "encryptedKeyWithError", "encryptedKey", "key", "publicKeyWithError", "publicKey", "BLS_default", "_", "__decorateClass", "KeySharesDataV3", "data", "operator", "operatorData", "OperatorDataV3", "sharesInstance", "KeySharesKeysV3", "_", "share", "_a", "BLS_default", "e", "BLSDeserializeError", "_b", "OperatorsWithSharesCountsMismatchError", "operatorIds", "operatorPublicKeys", "DuplicatedOperatorIdError", "DuplicatedOperatorPublicKeyError", "__decorateClass", "import_underscore", "ethers", "import_class_validator", "_KeySharesPayloadV3", "arr", "item", "publicKeys", "privateKeys", "encryptedShares", "arrayPublicKeys", "pk", "arrayEncryptedShares", "sh", "pkHex", "pkHexLength", "pkPsBytes", "data", "share", "_", "payload", "KeySharesPayloadV3", "__decorateClass", "_KeyShares", "version", "KeySharesPayloadV2", "KeySharesPayloadV3", "KeySharesDataV2", "KeySharesDataV3", "data", "_a", "payloadData", "entity", "_b", "err", "KeyShares", "__decorateClass", "ThresholdInvalidOperatorsLengthError", "operators", "message", "ThresholdInvalidOperatorIdError", "operator", "Threshold", "privateKey", "__async", "F", "resolve", "reject", "BLS_default", "msk", "mpk", "i", "sk", "pk", "operatorId", "id", "shareSecretKey", "sharePublicKey", "response", "error", "Threshold_default", "import_crypto", "import_scrypt_js", "import_ethereumjs_wallet", "import_ethereumjs_util", "EthereumKeyStore", "keyStoreData", "_a", "password", "__async", "Wallet", "input", "json", "derivedKey", "kdfParams", "crypto", "ciphertext", "checksumBuffer", "hashFunction", "decipher", "seed", "cipher", "data", "byteArray", "byte", "EthereumKeyStore_default", "_SSVKeys", "ver", "KeyShares", "data", "password", "__async", "EthereumKeyStore_default", "privateKey", "error", "operators", "threshold", "Threshold_default", "operatorsPublicKeys", "shares", "sharesFormat", "decodedOperators", "operator", "atob", "Encryption", "share", "web3", "operatorIds", "operatorPublicKeys", "_a", "validatorPublicKey", "operatorsIds", "encryptedShares", "ssvAmount", "keyShares", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "publicKeys", "encryptedKeys", "item", "index", "SSVKeys"]
}
