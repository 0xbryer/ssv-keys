(()=>{var rr=Object.create;var I=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var er=Object.getOwnPropertyNames;var tr=Object.getPrototypeOf,sr=Object.prototype.hasOwnProperty;var c=(i=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(i,{get:(r,e)=>(typeof require!="undefined"?require:r)[e]}):i)(function(i){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+i+'" is not supported')});var ir=(i,r)=>{for(var e in r)I(i,e,{get:r[e],enumerable:!0})},ar=(i,r,e,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let s of er(r))!sr.call(i,s)&&s!==e&&I(i,s,{get:()=>r[s],enumerable:!(t=U(r,s))||t.enumerable});return i};var S=(i,r,e)=>(e=i!=null?rr(tr(i)):{},ar(r||!i||!i.__esModule?I(e,"default",{value:i,enumerable:!0}):e,i));var h=(i,r,e,t)=>{for(var s=t>1?void 0:t?U(r,e):r,o=i.length-1,a;o>=0;o--)(a=i[o])&&(s=(t?a(r,e,s):a(s))||s);return t&&s&&I(r,e,s),s};var n=(i,r,e)=>new Promise((t,s)=>{var o=d=>{try{l(e.next(d))}catch(f){s(f)}},a=d=>{try{l(e.throw(d))}catch(f){s(f)}},l=d=>d.done?t(d.value):Promise.resolve(d.value).then(o,a);l((e=e.apply(i,r)).next())});var z=S(c("atob")),j=S(c("web3")),F=c("js-base64"),G=S(c("eth2-keystore-js"));var T;try{window.crypto,T=c("bls-eth-wasm/browser")}catch(i){T=c("bls-eth-wasm")}var p=T;var V=class extends Error{constructor(e,t){super(t);this.operators=e}},W=class extends Error{constructor(e,t){super(t);this.operator=e}},_=class{constructor(){this.shares=[]}static get DEFAULT_THRESHOLD_NUMBER(){return 3}create(r,e){return n(this,null,function*(){e.map(s=>{if(!Number.isInteger(s))throw new W(s,`Operator must be integer. Got: ${String(s)}`)});let t=(e.length-1)/3;if(!Number.isInteger(t))throw new V(e,"Invalid operators length. It should satisfy conditions: \u2016 Operators \u2016 := 3 * F + 1 ; F \u2208 \u2115");return new Promise((s,o)=>{try{p.init(p.BLS12_381).then(()=>{let a=[],l=[];this.validatorPrivateKey=p.deserializeHexStrToSecretKey(r),this.validatorPublicKey=this.validatorPrivateKey.getPublicKey(),a.push(this.validatorPrivateKey),l.push(this.validatorPublicKey);for(let f=1;f<e.length-t;f+=1){let m=new p.SecretKey;m.setByCSPRNG(),a.push(m);let K=m.getPublicKey();l.push(K)}for(let f of e){let m=new p.Id;m.setInt(f);let K=new p.SecretKey;K.share(a,m);let x=new p.PublicKey;x.share(l,m),this.shares.push({privateKey:`0x${K.serializeToHexStr()}`,publicKey:`0x${x.serializeToHexStr()}`,id:m})}let d={validatorPrivateKey:`0x${this.validatorPrivateKey.serializeToHexStr()}`,validatorPublicKey:`0x${this.validatorPublicKey.serializeToHexStr()}`,shares:this.shares};s(d)})}catch(a){o(a)}})})}},k=_;var D=c("js-base64");var $;try{window.crypto,$=c("jsencrypt").JSEncrypt}catch(i){$=c("node-jsencrypt")}var B=$;var v=class extends Error{constructor(e,t){super(t);this.operator=e}},P=class{constructor(r,e){this.RAW_OPERATOR_PUBLIC_KEY_SIGNATURE=RegExp(/------BEGIN RSA PUBLIC KEY-----/,"gmi");this.operators=r.map(t=>this.RAW_OPERATOR_PUBLIC_KEY_SIGNATURE.test(t)?t:(0,D.decode)(t)),this.shares=e}encrypt(){let r=[];return Object.keys(this.operators).forEach(e=>{let t=new B({});try{t.setPublicKey(this.operators[e])}catch(a){throw new v({rsa:this.operators[e],base64:(0,D.encode)(this.operators[e])},`Operator is not valid RSA Public Key: ${a}`)}let s=t.encrypt(this.shares[e].privateKey),o={operatorPublicKey:this.operators[e],privateKey:String(s),publicKey:this.shares[e].publicKey};return r.push(o),o}),r}};var C=class{constructor(){this.web3Instances={}}getWeb3(r=process.env.NODE_URL||""){return this.web3Instances[r]||(this.web3Instances[r]=new j.default(String(r||""))),this.web3Instances[r]}getPrivateKeyFromKeystoreData(r,e){return n(this,null,function*(){try{try{r=JSON.parse(r)}catch(s){}return yield new G.default(r).getPrivateKey(e).then(s=>s)}catch(t){return t}})}createThreshold(r,e){return n(this,null,function*(){try{return new k().create(r,e)}catch(t){return t}})}encryptShares(r,e,t=""){return n(this,null,function*(){try{let s=r.map(a=>String((0,F.encode)((0,z.default)(a))));return new P(s,e).encrypt().map(a=>(a.operatorPublicKey=(0,F.encode)(a.operatorPublicKey),t===C.SHARES_FORMAT_ABI&&(a.operatorPublicKey=this.getWeb3().eth.abi.encodeParameter("string",a.operatorPublicKey),a.privateKey=this.getWeb3().eth.abi.encodeParameter("string",a.privateKey)),a))}catch(s){return s}})}abiEncode(r,e){return r.map(t=>{let s=Object(t)[e];return String(s).startsWith("0x")?s:this.getWeb3().eth.abi.encodeParameter("string",s)})}buildPayload(r,e,t,s){return n(this,null,function*(){let o=t.map(l=>l.publicKey),a=this.abiEncode(t,"privateKey");return[r,e.join(","),o,a,s]})}},O=C;O.SHARES_FORMAT_ABI="abi";var L=S(c("crypto")),q=c("scrypt-js"),A=S(c("ethereumjs-wallet")),R=c("ethereumjs-util"),H=class{constructor(r){this.privateKey="";if(!r)throw new Error("Key store data should be JSON or string");if(this.keyStoreData=JSON.parse(String(r)),!this.keyStoreData.version)throw new Error("Invalid keystore file")}getPublicKey(){var r;if(this.keyStoreData)switch((r=this.keyStoreData.version)!=null?r:this.keyStoreData.Version){case 1:return this.keyStoreData.Address;case 3:return this.keyStoreData.id;case 4:return this.keyStoreData.pubkey}return""}getPrivateKey(r=""){return n(this,null,function*(){if(this.privateKey)return this.privateKey;switch(this.keyStoreData.version){case 1:this.wallet=yield A.default.fromV1(this.keyStoreData,r);break;case 3:this.wallet=yield A.default.fromV3(this.keyStoreData,r,!0);break;case 4:this.wallet=yield this.fromV4(this.keyStoreData,r);break}if(this.wallet&&(this.privateKey=this.wallet.getPrivateKey().toString("hex"),!this.privateKey))throw new Error("Invalid password");return this.privateKey})}fromV4(r,e){return n(this,null,function*(){let t=typeof r=="object"?r:JSON.parse(r);if(t.version!==4)throw new Error("Not a V4 wallet");let s,o;if(t.crypto.kdf.function==="scrypt")o=t.crypto.kdf.params,s=yield(0,q.scrypt)(Buffer.from(e),Buffer.from(o.salt,"hex"),o.n,o.r,o.p,o.dklen);else if(t.crypto.kdf.function==="pbkdf2"){if(o=t.crypto.kdf.params,o.prf!=="hmac-sha256")throw new Error("Unsupported parameters to PBKDF2");s=L.default.pbkdf2Sync(Buffer.from(e),Buffer.from(o.salt,"hex"),o.c,o.dklen,"sha256")}else throw new Error("Unsupported key derivation scheme");let a=Buffer.from(t.crypto.cipher.message,"hex"),l=Buffer.concat([Buffer.from(s.slice(16,32)),a]);if({keccak256:R.keccak256,sha256:R.sha256}[t.crypto.checksum.function](l).toString("hex")!==t.crypto.checksum.message)throw new Error("Invalid password");let K=L.default.createDecipheriv(t.crypto.cipher.function,s.slice(0,16),Buffer.from(t.crypto.cipher.params.iv,"hex")),x=this.runCipherBuffer(K,a);return new A.default(x)})}runCipherBuffer(r,e){return Buffer.concat([r.update(e),r.final()])}static toHexString(r){return Array.from(r,e=>`0${(e&255).toString(16)}`.slice(-2)).join("")}},M=H;var u=c("class-validator");var J={};ir(J,{KeySharesDataV2:()=>g,KeySharesKeysV2:()=>w,OperatorV2:()=>E});var X=S(c("web3")),Z=c("js-base64"),y=c("class-validator");var Y=c("js-base64");var Q=i=>n(void 0,null,function*(){try{let r="Invalid operator key format, make sure the operator exists in the network",e=(0,Y.decode)(i);if(!e.startsWith("-----BEGIN RSA PUBLIC KEY-----"))throw Error(r);let t=new B({});try{t.setPublicKey(e)}catch(s){throw new v({rsa:e,base64:i},r)}return!0}catch(r){let{message:e}=r;return e}});var or=new X.default,w=class{constructor(r,e){this.publicKeys=r,this.encryptedKeys=e}};h([(0,y.IsArray)(),(0,y.MinLength)(98,{each:!0})],w.prototype,"publicKeys",2),h([(0,y.IsArray)(),(0,y.MinLength)(98,{each:!0})],w.prototype,"encryptedKeys",2);var E=class{constructor(r,e){this.id=r,this.publicKey=e}};h([(0,y.IsInt)()],E.prototype,"id",2),h([(0,y.IsString)(),(0,y.MinLength)(98)],E.prototype,"publicKey",2);var g=class{constructor(r){this.publicKey=r.publicKey,this.operators=r.operators.map(e=>new E(e.id,e.publicKey)),this.shares=new w(r.shares.publicKeys,r.shares.encryptedKeys)}get sharesPublicKeys(){return this.shares.publicKeys}get sharesEncryptedKeys(){return this.shares.encryptedKeys}get operatorIds(){return this.operators.map(r=>r.id)}get operatorPublicKeys(){return this.operators.map(r=>r.publicKey)}validateValidatorPublicKey(){return n(this,null,function*(){try{p.deserializeHexStrToPublicKey(this.publicKey.replace("0x",""))}catch(r){throw Error(`Can not BLS deserialize validator public key: ${this.publicKey}. Error: ${String(r)}`)}})}validateSharesPublicKeys(){return n(this,null,function*(){let r="";try{for(let e of this.sharesPublicKeys)r=e,p.deserializeHexStrToPublicKey(e.replace("0x",""))}catch(e){throw Error(`Can not BLS deserialize shares public key: ${r}. Error: ${String(e)}`)}})}validateSharesEncryptedKeys(){return n(this,null,function*(){let r="";try{this.sharesEncryptedKeys.map(e=>{let t=e;t.startsWith("0x")&&(r=t,t=or.eth.abi.decodeParameter("string",e)),(0,Z.decode)(String(t))})}catch(e){throw Error(`Can not ABI decode shares encrypted key: ${r}. Error: ${String(e)}`)}})}validateCounts(){return n(this,null,function*(){if(this.operatorIds.length!==this.sharesEncryptedKeys.length||this.operatorIds.length!==this.sharesPublicKeys.length||this.operatorIds.length!==this.operatorPublicKeys.length)throw Error("Length of operators and shares should be equal.")})}validateOperatorsPublicKeys(){return n(this,null,function*(){for(let r of this.operatorPublicKeys){let e=yield Q(r);if(e!==!0)throw Error(String(e))}})}validate(){return n(this,null,function*(){yield p.init(p.BLS12_381),yield this.validateCounts(),yield this.validateSharesPublicKeys(),yield this.validateValidatorPublicKey(),yield this.validateSharesEncryptedKeys(),yield this.validateOperatorsPublicKeys()})}};h([(0,y.IsString)(),(0,y.Length)(98,98)],g.prototype,"publicKey",2),h([(0,y.ValidateNested)()],g.prototype,"operators",2),h([(0,y.ValidateNested)()],g.prototype,"shares",2);var N=class{constructor({version:r,data:e,payload:t}){this.version=r,this.data=e,this.payload=t||""}setPayload(r){return this.payload=r,this}static fromData(r){return n(this,null,function*(){typeof r=="string"&&(r=JSON.parse(r));let e;switch(r.version){case N.VERSION_V2:e=new g(r.data);break;default:throw Error(`Keyshares version is not supported: ${r.version}`)}let t=new N({version:r.version,data:e,payload:r.payload||""});yield(0,u.validateOrReject)(t).catch(s=>{throw Error(`Keyshares file have wrong format. Errors: ${JSON.stringify(s,null,"  ")}`)});try{yield t.data.validate()}catch(s){throw Error(`Keyshares data did not pass validation. Errors: ${s.message||s.stack||s.trace||String(s)}`)}return t})}toString(){return JSON.stringify({version:this.version,data:this.data,payload:this.payload||"",createdAt:new Date().toISOString()},null,"  ")}},b=N;b.VERSION_V2="v2",h([(0,u.IsString)(),(0,u.IsDefined)(),(0,u.IsNotEmpty)()],b.prototype,"version",2),h([(0,u.ValidateNested)()],b.prototype,"data",2),h([(0,u.IsString)()],b.prototype,"payload",2);})();
